<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-02-15T17:40:30+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">gooooooooooose</title><subtitle>goose's dev blog</subtitle><author><name>goooose</name></author><entry><title type="html">python으로 RNN 구현하기</title><link href="http://localhost:4000/pytorch/rnn-impl/" rel="alternate" type="text/html" title="python으로 RNN 구현하기" /><published>2022-12-28T00:00:00+09:00</published><updated>2022-12-28T00:00:00+09:00</updated><id>http://localhost:4000/pytorch/rnn-impl</id><content type="html" xml:base="http://localhost:4000/pytorch/rnn-impl/"><![CDATA[<h2 id="related">Related</h2>
<blockquote>
  <p>이전 포스트에서 CNN을 구현했고 이번에는 RNN을 구현하는 과정을 정리하려고 합니다.</p>
</blockquote>

<h2 id="rnn">RNN</h2>
<p>RNN은 Recurrent Neural Network의 약자로 계산을 담당하는 Cell이 순환되는 구조를 말합니다.</p>

<p>이번에 구현한 RNN 레이어를 학습하기 위해 주로 사용되는 시계열 데이터가 아닌 계속 사용하던 MNIST를 사용할 생각입니다.</p>

<p>MNIST는 (28, 28)의 크기를 가지고 있기 때문에 길이가 28이고 크기 28인 벡터의 시퀀스 데이터로 생각해볼 수 있습니다. 이를 이용하여 RNN을 학습해봤습니다.</p>

<h2 id="forward">Forward</h2>
<p>RNN 레이어의 수식과 파라미터들의 size들은 pytorch RNN 문서에 있는 수식으로 사용했습니다.</p>

<p>$h_t = \text{tanh}(x_t \cdot W_{ih}^T + b_{ih} + h_{t-1} \cdot W_{hh}^T + b_{hh})$</p>

<p>그리고 pytorch의 RNN 레이어에는 <code class="language-plaintext highlighter-rouge">num_layers</code>라는 인자를 볼 수 있습니다. <code class="language-plaintext highlighter-rouge">num_layers</code>는 하나의 순회를 담당하는 레이어를 얼마나 쌓을지 결정하는 인자이고 기본값은 1입니다. 만약, <code class="language-plaintext highlighter-rouge">num_layers = 2</code>으로 준다면 다음과 같은 그림의 RNN을 얻을 수 있습니다.</p>

<p><img src="https://drive.google.com/uc?export=view&amp;id=1FXnyZZ3IY4KdRQcsupzlUi78AgEXBTsO" alt="" width="500" /></p>

<p>X를 입력으로 받는 레이어의 출력값이 다음 레이어의 입력으로 들어오고 hidden state의 초기값인 h0는 각 레이어마다 별도의 벡터로 주어집니다.</p>

<p>따라서 RNN의 출력은 <code class="language-plaintext highlighter-rouge">batch_first=False</code>인 경우 (input_length, batch_size, hidden_size) 크기인 output과 (num_layers, batch_size, hidden_size) 크기인 hidden state 벡터를 얻을 수 있습니다. <code class="language-plaintext highlighter-rouge">batch_first=True</code>인 경우 length와 batch_size의 위치가 바뀝니다.</p>

<p>pytorch의 RNN 레이어의 또 다른 특징은 <code class="language-plaintext highlighter-rouge">nonlinearity</code>입니다. 비선형 함수로 <code class="language-plaintext highlighter-rouge">tanh</code>을 사용하고 있는데 <code class="language-plaintext highlighter-rouge">relu</code>를 추가로 사용할 수 있어서 여기에서도 <code class="language-plaintext highlighter-rouge">relu</code>를 사용할 수 있도록 구현했습니다.</p>

<h2 id="backward">Backward</h2>
<p>RNN의 역전파 과정은 시간순으로 forward가 되었으므로 시간의 역순으로 돌아야 합니다. Pytorch RNN 문서에 있는 수식을 사용했습니다.</p>

<p>${h_t} = \text{tanh}(x_t \cdot W_{ih}^T + b_{ih} + h_{t-1} \cdot W_{hh}^T + b_{hh})$</p>

<p>foward에서 사용된 위의 수식을 분리해서 생각해보겠습니다.(정확한 방법과 차이가 있을 수 있습니다.)</p>

<p>$s_t = x_t \cdot W_{ih}^T + b_{ih} + h_{t-1} \cdot W_{hh}^T + b_{hh}$</p>

<p>$h_t = \text{tanh}(s_t)$</p>

<p>cost function $J$를 $W_{ih}$, $W_{hh}$, ${x_t}$에 대해 편미분하여 gradient를 구해야 합니다. bias의 경우 편미분할 경우 1이 되므로 따로 유도하지 않겠습니다.</p>

<p>${\partial J \over \partial x_t} = {\partial J \over \partial h_t} \cdot {\partial h_t \over \partial s_t} \cdot {\partial s_t \over \partial x_t}$</p>

<p>${\partial J \over \partial W_{ih}} = {\partial J \over \partial h_t} \cdot {\partial h_t \over \partial s_t} \cdot {\partial s_t \over \partial W_{ih}}$</p>

<p>${\partial J \over \partial W_{hh}} = {\partial J \over \partial h_t} \cdot {\partial h_t \over \partial s_t} \cdot {\partial s_t \over \partial W_{hh}}$</p>

<p>여기서 비선형 함수가 <code class="language-plaintext highlighter-rouge">tanh</code>인 경우 <code class="language-plaintext highlighter-rouge">tanh</code> 함수의 미분은 다음과 같습니다.</p>

<p>$\text{tanh}(x)$ -&gt; $1 - \text{tanh}(x)^2$</p>

<p>따라서, ${\partial h_t \over \partial s_t} = 1 - \text{tanh}(s_t)^2 = 1 - h_t^2$</p>

<p>역전파 과정에서 출력층에서 들어오는 gradient가 ${\partial J \over \partial h_t} = dout$라고 생각하게 되면 다음과 같은 수식으로 구할 수 있습니다.</p>

<p>${\partial J \over \partial x_t} = dout \cdot (1 - \text{tanh}(s_t)^2) \cdot {\partial s_t \over \partial x_t} = dout \cdot (1 - h_t^2) \cdot W_{ih}$</p>

<p>${\partial J \over \partial W_{ih}} = dout \cdot (1 - \text{tanh}(s_t)^2) \cdot {\partial s_t \over \partial W_{ih}} = (dout \cdot (1 - h_t^2))^T \cdot x_t$</p>

<p>${\partial J \over \partial W_{hh}} = dout \cdot (1 - \text{tanh}(s_t)^2) \cdot {\partial s_t \over \partial W_{hh}} = (dout \cdot (1 - h_t^2))^T \cdot h_{t-1}$</p>

<p>한 가지 더 고려해야 하는 점이 있습니다. RNN은 hidden state를 다음 셀에 전달하고 계산에 사용하기 때문에 hidden state에 대한 gradient를 고려해야 합니다. 여기서 얻은 gradient는 현재 셀에서의 hidden_state에 더하게 됩니다.</p>

<p><img src="https://drive.google.com/uc?export=view&amp;id=1eb2CmnJKMQSUpuJ2Bdym1I5ARF-vn_dZ" alt="" width="500" /></p>

<p>따라서 현제 셀에 대해 다음과 같은 코드로 구현할 수 있습니다. 가장 마지막 셀에 들어가는 <code class="language-plaintext highlighter-rouge">dhnext</code>는 0으로 초기화하여 넣어주면 됩니다. <code class="language-plaintext highlighter-rouge">h_next</code>는 t시점의 셀에서 계산된 hidden state 벡터이고 <code class="language-plaintext highlighter-rouge">h_prev</code>는 t시점의 셀로 들어온 hidden state 벡터를 말합니다.</p>

<script src="https://gist.github.com/emeraldgoose/7d17b6e294d5f746a91b542b093a6b68.js"></script>

<h2 id="result">Result</h2>
<p>이전과 마찬가지로 MNIST 5000장을 훈련데이터, 1000장을 테스트데이터로 사용하여 <code class="language-plaintext highlighter-rouge">tanh</code>, <code class="language-plaintext highlighter-rouge">relu</code>를 사용하여 결과를 확인해봤습니다.</p>

<script src="https://gist.github.com/emeraldgoose/1a03bf1d8296cf80e74e55d46a324d68.js"></script>

<p>사용된 모델은 RNN과 Linear 레이어를 사용하고 RNN의 마지막 출력 벡터를 Linear에 통과시키는 방법으로 사용했습니다.</p>

<p>먼저, <code class="language-plaintext highlighter-rouge">tanh</code>을 사용한 경우 loss와 Acc의 결과입니다.<br />
<img src="https://drive.google.com/uc?export=view&amp;id=1eIM02Ku_VkL9IJSvO8DQuoJe77uFqCz4" alt="" width="400" />
<img src="https://drive.google.com/uc?export=view&amp;id=1pthsFxqP8K0CUEBljJIu9Sz9_tkXfyfd" alt="" width="400" /></p>

<p>다음, <code class="language-plaintext highlighter-rouge">relu</code>를 사용한 경우 loss와 Acc의 결과입니다.<br />
<img src="https://drive.google.com/uc?export=view&amp;id=1BqTJdgQ6jZAUW9Ll0nWOa7WVmLhrEg65" alt="" width="400" />
<img src="https://drive.google.com/uc?export=view&amp;id=1-hmljxBB-mOwL4CjENlv3hXwgpsjai-u" alt="" width="400" /></p>

<p>두 함수 모두 10 epochs에 loss가 떨어지기는 하지만 앞의 MLP나 CNN처럼 잘 떨어지지는 않았습니다. RNN에 MNIST 태스크가 적합하지 않아 생기는 이유일 수도 있고 MLP 모델의 파라미터가 660K개인 반면 RNN 모델의 파라미터가 200K개여서 생기는 문제일 수도 있습니다. 아무튼 학습이 된다는 점에 의미를 두려고 합니다.</p>

<h3 id="next">Next</h3>
<p>RNN의 마지막으로 LSTM까지 구현해보려고 합니다. LSTM이 RNN의 long-term dependency 문제를 해결한 모델로 여기까지는 구현해야한다고 생각되어 진행할 생각입니다.</p>

<h2 id="reference">Reference</h2>
<ul>
  <li><a href="https://ratsgo.github.io/natural%20language%20processing/2017/03/09/rnnlstm/">https://ratsgo.github.io/natural%20language%20processing/2017/03/09/rnnlstm/</a></li>
  <li><a href="https://towardsdatascience.com/backpropagation-in-rnn-explained-bdf853b4e1c2">https://towardsdatascience.com/backpropagation-in-rnn-explained-bdf853b4e1c2</a></li>
  <li><a href="https://datascience-enthusiast.com/DL/Building_a_Recurrent_Neural_Network-Step_by_Step_v1.html">https://datascience-enthusiast.com/DL/Building_a_Recurrent_Neural_Network-Step_by_Step_v1.html</a></li>
  <li><a href="https://github.com/young-hun-jo/DeepLearningOnlyNumpy/blob/main/season2/common/time_layers.py">https://github.com/young-hun-jo/DeepLearningOnlyNumpy/blob/main/season2/common/time_layers.py</a></li>
</ul>]]></content><author><name>goooose</name></author><category term="Pytorch" /><category term="torch" /><summary type="html"><![CDATA[Related 이전 포스트에서 CNN을 구현했고 이번에는 RNN을 구현하는 과정을 정리하려고 합니다.]]></summary></entry><entry><title type="html">데이터 파이프라인 구축해보기</title><link href="http://localhost:4000/data-engineer/data-pipeline/" rel="alternate" type="text/html" title="데이터 파이프라인 구축해보기" /><published>2022-12-02T00:00:00+09:00</published><updated>2022-12-02T00:00:00+09:00</updated><id>http://localhost:4000/data-engineer/data-pipeline</id><content type="html" xml:base="http://localhost:4000/data-engineer/data-pipeline/"><![CDATA[<h3 id="motivation">Motivation</h3>
<blockquote>
  <p><strong>빅데이터를 지탱하는 기술</strong>을 읽다가 데이터 엔지니어링에 사용되는 플랫폼들을 전체 파이프라인으로 구축해보고 싶어서
이 사이드 프로젝트를 진행하게 되었습니다.</p>
</blockquote>

<p><img src="https://user-images.githubusercontent.com/50171632/205239615-69152b4b-112b-492e-ae90-ef752b436f6b.png" alt="" width="700" /></p>

<h3 id="data">Data</h3>
<p>먼저, 수집할 데이터는 nginx로부터 나오는 로그를 생각했습니다. 하지만 많은 양의 로그를 생산하려면 nginx로부터 나오게 하기는 어려워서 python 코드로 비슷한 nginx 로그를 생성하고 /var/log/httpd/access_log/*.log에 logging 모듈로 기록하는 방법으로 로그를 생산했습니다.</p>

<p>생산되는 로그는 다음과 같습니다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>206.176.215.237 - - [02/Dec/2022:18:57:34 +0900] "GET /api/items HTTP/1.1" 200 3456 477 "https://www.dummmmmy.com" "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.1 Mobile/15E148 Safari/604.1"
</code></pre></div></div>

<h3 id="producerfilebeat">Producer(FileBeat)</h3>
<p>서버 접속 기록을 로깅하는 서버에서 로그를 외부로 보내주는 무언가 필요했습니다. 로그 파일을 ELK 스택의 logstash로 읽는 방법이 있지만 Elasticsearch와 HDFS에 적재하려면 losgtash를 밖으로 빼내 수집 서버를 따로 두고 서버에는 logstash와 잘 맞는 FileBeat를 사용하는 것이 맞다고 생각했습니다.</p>

<p>FileBeat는 Logstash의 무겁다는 단점을 보완하여 개발된 로그 수집기입니다. 로그파일의 경로를 설정하면 offset을 기억해 추가되는 로그를 외부로 전달하는 역할을 합니다.</p>

<p>FileBeat는 /var/log/httpd/access_log/*.log 파일을 읽어 Logstash 서버로 추가된 로그를 전달하는 역할을 합니다. FileBeat를 사용하면 Logstash에서 별다른 설정 없이 바로 사용할 수 있다는 점도 선택에 영향이 있었습니다.</p>

<h3 id="logstash">Logstash</h3>
<p>Logstash는 전달받은 로그를 Elasticsearch나 다른 곳으로 전달하는 역할을 합니다. Logstash를 사용한 이유는 람다 아키텍처같은 파이프라인을 생각하고 있기 때문입니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                      ┌-- Elasticsearch -- Kibana
FileBeat -- Logstash -| 
                      └-- HDFS ------- Postgresql
</code></pre></div></div>

<p>람다 아키텍처처럼 실시간으로 수집되어 보여주는 뷰와 배치 처리되어 보여주는 뷰를 제공하는 구조인데 logstash는 여러 경로의 Output을 지원하고 있기 때문에 적합하다고 생각했습니다.</p>

<p>logstash는 *.conf 파일을 사용하여 사용자가 원하는 데이터 가공이 가능합니다. 저는 각 항목과 ip의 위치주소, User Agent 정보를 파싱하는 필터를 넣어 파싱할 수 있었습니다. 로그를 파싱할때는 grok을 사용했고 다음과 같은 설정값을 사용했습니다. geoip와 useragent 플러그인을 사용하면 IP의 위치(국가, 도시)와 접속한 브라우저, OS 등을 추가할 수 있습니다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>filter {
  grok {
    match =&gt; {
      "message" =&gt; "%{IPORHOST:remote_addr} - %{USER:remote_user} \[%{HTTPDATE:time_local}\] \"%{WORD:method} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})\" %{NUMBER:status} (?:%{NUMBER:body_bytes_sent}|-) (?:%{NUMBER:response_time}|-) \"%{GREEDYDATA:referrer}\" \"%{GREEDYDATA:UA}\""
    }
  }
  geoip {
    source =&gt; "remote_addr"
    target =&gt; "clientgeoip"
  }
  useragent {
    source =&gt; "UA"
  }
}
</code></pre></div></div>

<h3 id="elasticsearch-kibana">Elasticsearch, Kibana</h3>
<p>Elasticsearch는 logstash로부터 전달받은 데이터를 저장하는 DB역할을 합니다. Kibana는 Elasticsearch의 데이터를 보여주는 대시보드 역할을 합니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FileBeat -- Logstash -- Elasticsearch -┬- Kibana
                                       |
                                       └- HDFS
</code></pre></div></div>
<p>위와 같은 파이프라인을 생각해보긴 했는데 낮은 사양의 ES 서버에 데이터 저장과 추출을 하는 것이 너무 부담되었습니다. 그래서 ES는 따로 두고 Logstash에서 HDFS로 전달하는 것으로 설계했습니다.</p>

<p>Dockerfile을 따로 작성하지 않았는데 Elasticsearch와 Kibana까지 도커로 올리면 맥북이 감당하지 못할 것 같아서 서버를 빌려주는 플랫폼을 알아보게 되었습니다.</p>

<p>처음에는 GCP 프리티어를 생각했다가 <a href="https://ide.goorm.io">구름</a>이 생각나서 이곳에 설치했습니다. 구름ide가 빌려주는 서버 자원이 좋지는 않지만 항상 켜둘 수 있고 *.run.goorm.io라는 도메인도 제공되어 사용하게 되었습니다. 아래 주소로 Kibana에 접속할 수 있지만 동작이 느리므로 조금 기다려주세요.</p>
<ul>
  <li><a href="https://dashboard-kibana.run.goorm.io">dashboard-kibana.run.goorm.io</a></li>
  <li>만약, logstash로 구름에 있는 elasticsearch로 연결하려면 포트포워딩 세팅을 하고 port는 443으로 접근해야 합니다.</li>
</ul>

<h3 id="hdfs">HDFS</h3>
<p>로그를 수집하여 배치처리하려면 먼저 저장될 공간이 필요했습니다. logstash로부터 온 데이터들은 먼저 hdfs에 저장되고 배치처리를 통해 RDB로 저장되는 과정을 생각했습니다.</p>

<p>하둡이 설치되는 도커를 더 늘리기는 어려워서 단일 노드로 사용하지만 설정은 분산 설정이 되어있는 모드인 Pseudo Distribute 모드로 사용했습니다.</p>

<p>HDFS는 특성상 파일을 여러번 수정하는데 좋지 않아 데이터를 모아 큰 파일을 한번에 적재했습니다. Logstash도 Output으로 데이터를 내보내어 중간에 저장할 공간이 필요했습니다. 저는 이 공간이 In-memory DB가 적당하다고 생각되어서 Redis를 두어 데이터를 저장하고 Spark 스크립트로 HDFS에 적재했습니다.</p>

<h3 id="redis">Redis</h3>
<p>Logstash로부터 하루 간격의 데이터를 받아 hdfs로 한번에 적재하기 위해 logstash와 HDFS사이에 임시 데이터 저장소가 필요했습니다. kafka는 현업에서 자주 쓰이는 플랫폼이지만 zookeeper가 추가로 설치되어야 하므로 도커를 추가로 올리는데 부담되어 제외했습니다. 그래서 redis를 선택하게 되었습니다.</p>

<p>Logstash는 redis로 보낼때 key를 지정해야합니다. key는 그날 날짜로 지정하여 연속적으로 데이터를 redis로 전달하여 하루 간격의 배치 처리 스크립트가 실행될 때 어제 날짜로 key 접근하여 데이터를 모을 수 있었습니다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>output {
    redis {
        host =&gt; ["redis"]
        port =&gt; 6379
        data_type =&gt; "list"
        key =&gt; "%{+YYYYMMdd}"
    }
}
</code></pre></div></div>

<h3 id="spark">Spark</h3>
<p>Spark는 하둡이 설치된 도커에 같이 설치했습니다. 처음에는 하둡의 Yarn의 관리를 받게 하려고 설치했지만 단일 노드로 돌리느라 local과 yarn의 차이가 나지는 않았습니다. 아래 pyspark 스크립트를 spark-submit 명령어로 실행하도록 했습니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Any</span>
<span class="kn">import</span> <span class="nn">json</span><span class="p">,</span> <span class="n">argparse</span><span class="p">,</span> <span class="n">datetime</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">redis</span>
<span class="kn">from</span> <span class="nn">pyspark.sql</span> <span class="kn">import</span> <span class="n">SparkSession</span>

<span class="k">def</span> <span class="nf">get_logs_from_redis</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">Any</span><span class="p">):</span>
    <span class="n">r</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">rq</span> <span class="o">=</span> <span class="n">redis</span><span class="p">.</span><span class="n">Redis</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">'redis'</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">6379</span><span class="p">,</span> <span class="n">db</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">while</span> <span class="n">rq</span><span class="p">.</span><span class="n">llen</span><span class="p">(</span><span class="n">key</span><span class="p">):</span>
        <span class="n">_</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="n">rq</span><span class="p">.</span><span class="n">brpop</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">json_normalize</span><span class="p">(</span><span class="n">value</span><span class="p">).</span><span class="n">to_dict</span><span class="p">(</span><span class="n">orient</span><span class="o">=</span><span class="s">'records'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">r</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">r</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="n">ArgumentParser</span><span class="p">()</span>
    <span class="n">start_date</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'--start_date'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="n">parse_args</span><span class="p">()</span>

    <span class="n">start_date</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="n">strptime</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">start_date</span><span class="p">,</span> <span class="s">'%Y-%m-%d'</span><span class="p">)</span>
    <span class="n">key</span> <span class="o">=</span> <span class="n">start_date</span><span class="p">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">'%Y%m%d'</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">get_logs_from_redis</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>

    <span class="n">spark</span> <span class="o">=</span> <span class="n">SparkSession</span><span class="p">.</span><span class="n">builder</span><span class="p">.</span><span class="n">appName</span><span class="p">(</span><span class="s">'Warehouse'</span><span class="p">).</span><span class="n">getOrCreate</span><span class="p">()</span>
    <span class="n">df</span> <span class="o">=</span> <span class="n">spark</span><span class="p">.</span><span class="n">createDataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="n">df</span><span class="p">.</span><span class="n">write</span><span class="p">.</span><span class="n">parquet</span><span class="p">(</span><span class="sa">f</span><span class="s">'hdfs://hadoop-spark:9000/warehouse/</span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="s">.parquet'</span><span class="p">,</span><span class="n">mode</span><span class="o">=</span><span class="s">'append'</span><span class="p">)</span>
    <span class="n">spark</span><span class="p">.</span><span class="n">stop</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="airflow">Airflow</h3>
<p>배치 스크립트를 실행하도록 Airflow를 사용했습니다. 하둡 도커에서 spark-submit을 실행하는 커맨드를 사용할 수 있도록 SSHOperator가 포함된 태스크와 hdfs에서 DB로 적재하는 배치처리하는 태스크를 구성했습니다. 데이터 양도 적고 빠르게 확인하기 위해 모두 @daily로 사용하여 하루 간격으로 실행하도록 했습니다.</p>

<p>spark-submit을 사용하는 스크립트는 다음과 같습니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">datetime</span>
<span class="kn">import</span> <span class="nn">pendulum</span>
<span class="kn">from</span> <span class="nn">airflow.decorators</span> <span class="kn">import</span> <span class="n">dag</span>
<span class="kn">from</span> <span class="nn">airflow.providers.ssh.operators.ssh</span> <span class="kn">import</span> <span class="n">SSHOperator</span>
<span class="kn">from</span> <span class="nn">airflow.providers.ssh.hooks.ssh</span> <span class="kn">import</span> <span class="n">SSHHook</span>

<span class="n">kst</span> <span class="o">=</span> <span class="n">pendulum</span><span class="p">.</span><span class="n">timezone</span><span class="p">(</span><span class="s">'Asia/Seoul'</span><span class="p">)</span>
<span class="n">now</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">().</span><span class="n">strftime</span><span class="p">(</span><span class="s">'%Y-%m-%d'</span><span class="p">)</span>
<span class="n">one_day_ago</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">(</span><span class="n">tz</span><span class="o">=</span><span class="n">kst</span><span class="p">)</span> <span class="o">-</span> <span class="n">datetime</span><span class="p">.</span><span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="o">@</span><span class="n">dag</span><span class="p">(</span>
    <span class="n">dag_id</span><span class="o">=</span><span class="s">'logs_redis_to_hdfs'</span><span class="p">,</span> 
    <span class="n">schedule_interval</span><span class="o">=</span><span class="s">'@daily'</span><span class="p">,</span> 
    <span class="n">start_date</span><span class="o">=</span><span class="n">one_day_ago</span><span class="p">,</span> 
    <span class="n">tags</span><span class="o">=</span><span class="p">[</span><span class="s">'batch'</span><span class="p">,</span><span class="s">'redis'</span><span class="p">,</span><span class="s">'hdfs'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">parquet_to_hdfs_from_logstash</span><span class="p">():</span>
    <span class="n">hook</span> <span class="o">=</span> <span class="n">SSHHook</span><span class="p">(</span>
        <span class="n">remote_host</span><span class="o">=</span><span class="s">'hadoop-spark'</span><span class="p">,</span>
        <span class="n">username</span><span class="o">=</span><span class="s">'root'</span><span class="p">,</span>
        <span class="n">key_file</span><span class="o">=</span><span class="s">'/root/.ssh/id_rsa.pub'</span>
    <span class="p">)</span>

    <span class="n">run_script</span> <span class="o">=</span> <span class="n">SSHOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">'run_script'</span><span class="p">,</span>
        <span class="n">ssh_hook</span><span class="o">=</span><span class="n">hook</span><span class="p">,</span>
        <span class="n">command</span><span class="o">=</span><span class="sa">f</span><span class="s">'/spark/bin/spark-submit /spark/logs_redis_to_hdfs.py --start_date </span><span class="si">{</span><span class="n">now</span><span class="si">}</span><span class="s">'</span><span class="p">,</span>
    <span class="p">)</span>
    
    <span class="n">run_script</span>
    
<span class="n">pipeline</span> <span class="o">=</span> <span class="n">parquet_to_hdfs_from_logstash</span><span class="p">()</span>
</code></pre></div></div>
<p>ssh로 하둡이 설치된 도커로 접속하여 SSHOperator로 command를 실행하는 DAG입니다. ssh로 접속하기 위해 airflow 도커와 하둡 도커의 <code class="language-plaintext highlighter-rouge">~/.ssh/</code> 폴더를 공유시켜 하둡에서 생성된 key 파일을 airflow에서 사용할 수 있게 했습니다.</p>

<p>RDB로 적재하는 스크립트는 다음과 같습니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">datetime</span>
<span class="kn">import</span> <span class="nn">pyspark</span>
<span class="kn">import</span> <span class="nn">sqlalchemy</span>
<span class="kn">import</span> <span class="nn">pendulum</span>
<span class="kn">from</span> <span class="nn">airflow.decorators</span> <span class="kn">import</span> <span class="n">dag</span><span class="p">,</span> <span class="n">task</span>

<span class="n">kst</span> <span class="o">=</span> <span class="n">pendulum</span><span class="p">.</span><span class="n">timezone</span><span class="p">(</span><span class="s">"Asia/Seoul"</span><span class="p">)</span>
<span class="n">yesterday</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">(</span><span class="n">tz</span><span class="o">=</span><span class="n">kst</span><span class="p">)</span> <span class="o">-</span> <span class="n">datetime</span><span class="p">.</span><span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="o">@</span><span class="n">dag</span><span class="p">(</span>
    <span class="n">dag_id</span><span class="o">=</span><span class="s">'store_to_postgres'</span><span class="p">,</span> 
    <span class="n">schedule_interval</span><span class="o">=</span><span class="s">'@daily'</span><span class="p">,</span> 
    <span class="n">start_date</span><span class="o">=</span><span class="n">yesterday</span><span class="p">,</span> 
    <span class="n">tags</span><span class="o">=</span><span class="p">[</span><span class="s">'batch'</span><span class="p">,</span><span class="s">'hdfs'</span><span class="p">,</span><span class="s">'rdb'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">batch_to_rdb</span><span class="p">():</span>
    <span class="o">@</span><span class="n">task</span>
    <span class="k">def</span> <span class="nf">get_logs_from_hdfs</span><span class="p">():</span>
        <span class="n">sc</span> <span class="o">=</span> <span class="n">pyspark</span><span class="p">.</span><span class="n">SparkContext</span><span class="p">(</span><span class="n">master</span><span class="o">=</span><span class="s">'local'</span><span class="p">,</span> <span class="n">conf</span><span class="o">=</span><span class="n">pyspark</span><span class="p">.</span><span class="n">SparkConf</span><span class="p">())</span>
        <span class="n">sqlContext</span> <span class="o">=</span> <span class="n">pyspark</span><span class="p">.</span><span class="n">sql</span><span class="p">.</span><span class="n">SQLContext</span><span class="p">(</span><span class="n">sc</span><span class="p">)</span>
        <span class="n">df</span> <span class="o">=</span> <span class="n">sqlContext</span><span class="p">.</span><span class="n">read</span><span class="p">.</span><span class="n">parquet</span><span class="p">(</span>
            <span class="sa">f</span><span class="s">'hdfs://hadoop-spark:9000/warehouse/</span><span class="si">{</span><span class="n">yesterday</span><span class="p">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">"%Y%m%d"</span><span class="p">)</span><span class="si">}</span><span class="s">.parquet'</span><span class="p">)</span>
        <span class="n">df</span><span class="p">.</span><span class="n">write</span><span class="p">.</span><span class="n">parquet</span><span class="p">(</span><span class="s">'data.parquet'</span><span class="p">)</span>
    
    <span class="o">@</span><span class="n">task</span>
    <span class="k">def</span> <span class="nf">transform</span><span class="p">():</span>
        <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_parquet</span><span class="p">(</span><span class="s">'data.parquet'</span><span class="p">,</span> <span class="n">engine</span><span class="o">=</span><span class="s">'pyarrow'</span><span class="p">)</span>
        <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span>
            <span class="n">columns</span> <span class="o">=</span> <span class="p">{</span>
                <span class="s">"clientgeoip.geo.country_name"</span> <span class="p">:</span> <span class="s">"country_name"</span><span class="p">,</span>
                <span class="s">"clientgeoip.geo.region_name"</span> <span class="p">:</span> <span class="s">"region_name"</span><span class="p">,</span>
                <span class="s">"clientgeoip.geo.city_name"</span> <span class="p">:</span> <span class="s">"city_name"</span><span class="p">,</span>
                <span class="s">"user_agent.name"</span> <span class="p">:</span> <span class="s">"browser"</span><span class="p">,</span>
                <span class="s">"user_agent.device.name"</span> <span class="p">:</span> <span class="s">"device"</span><span class="p">,</span>
                <span class="s">"user_agent.os.name"</span> <span class="p">:</span> <span class="s">"os_name"</span><span class="p">,</span>
                <span class="s">"user_agent.os.version"</span> <span class="p">:</span> <span class="s">"os_version"</span>
            <span class="p">}</span>
        <span class="p">)</span>
        <span class="n">df</span><span class="p">[</span><span class="s">'timestamp'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">to_datetime</span><span class="p">(</span>
            <span class="n">df</span><span class="p">[</span><span class="s">'time_local'</span><span class="p">],</span> 
            <span class="nb">format</span><span class="o">=</span><span class="s">'%d/%b/%Y:%H:%M:%S +0900'</span><span class="p">).</span><span class="n">dt</span><span class="p">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">'%Y-%m-%dT%H:%M:%S'</span><span class="p">))</span>

        <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span>
            <span class="p">[</span><span class="s">'timestamp'</span><span class="p">,</span><span class="s">'UA'</span><span class="p">,</span><span class="s">'body_bytes_sent'</span><span class="p">,</span><span class="s">'country_name'</span><span class="p">,</span><span class="s">'httpversion'</span><span class="p">,</span><span class="s">'message'</span><span class="p">,</span><span class="s">'method'</span><span class="p">,</span>
            <span class="s">'referrer'</span><span class="p">,</span><span class="s">'remote_addr'</span><span class="p">,</span><span class="s">'remote_user'</span><span class="p">,</span><span class="s">'request'</span><span class="p">,</span><span class="s">'response_time'</span><span class="p">,</span><span class="s">'status'</span><span class="p">,</span><span class="s">'device'</span><span class="p">,</span>
            <span class="s">'browser'</span><span class="p">,</span><span class="s">'os_name'</span><span class="p">,</span><span class="s">'os_version'</span><span class="p">,</span><span class="s">'city_name'</span><span class="p">,</span><span class="s">'region_name'</span><span class="p">]</span>
        <span class="p">]</span>

        <span class="n">df_yesterday</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span>
            <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">'timestamp'</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">yesterday</span><span class="p">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">'%Y-%m-%d'</span><span class="p">)</span><span class="o">+</span><span class="s">'T0:0:0'</span><span class="p">)</span> <span class="o">&amp;</span> \
            <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">'timestamp'</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">yesterday</span><span class="p">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">'%Y-%m-%d'</span><span class="p">)</span><span class="o">+</span><span class="s">'T23:59:59'</span><span class="p">)</span>
        <span class="p">]</span>
        <span class="n">df_today</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span>
            <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">'timestamp'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">yesterday</span><span class="p">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">'%Y-%m-%d'</span><span class="p">)</span><span class="o">+</span><span class="s">'T23:59:59'</span><span class="p">)</span>
        <span class="p">]</span>
        <span class="n">df_yesterday</span><span class="p">.</span><span class="n">to_parquet</span><span class="p">(</span><span class="s">'yesterday.parquet'</span><span class="p">,</span> <span class="n">engine</span><span class="o">=</span><span class="s">'pyarrow'</span><span class="p">,</span> <span class="n">compression</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">df_today</span><span class="p">.</span><span class="n">to_parquet</span><span class="p">(</span><span class="s">'today.parquet'</span><span class="p">,</span> <span class="n">engine</span><span class="o">=</span><span class="s">'pyarrow'</span><span class="p">,</span> <span class="n">compression</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    
    <span class="o">@</span><span class="n">task</span>
    <span class="k">def</span> <span class="nf">store_to_postgres</span><span class="p">():</span>
        <span class="n">engine</span> <span class="o">=</span> <span class="n">sqlalchemy</span><span class="p">.</span><span class="n">create_engine</span><span class="p">(</span><span class="s">'postgresql://root:root@postgres/mart'</span><span class="p">)</span>
        <span class="n">df_yesterday</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_parquet</span><span class="p">(</span><span class="s">'yesterday.parquet'</span><span class="p">,</span> <span class="n">engine</span><span class="o">=</span><span class="s">'pyarrow'</span><span class="p">)</span>
        <span class="n">df_today</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_parquet</span><span class="p">(</span><span class="s">'today.parquet'</span><span class="p">,</span> <span class="n">engine</span><span class="o">=</span><span class="s">'pyarrow'</span><span class="p">)</span>

        <span class="n">df_yesterday</span><span class="p">.</span><span class="n">to_sql</span><span class="p">(</span>
            <span class="n">name</span><span class="o">=</span><span class="sa">f</span><span class="s">'mart_</span><span class="si">{</span><span class="n">yesterday</span><span class="p">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">"%Y%m%d"</span><span class="p">)</span><span class="si">}</span><span class="s">'</span><span class="p">,</span>
            <span class="n">con</span><span class="o">=</span><span class="n">engine</span><span class="p">,</span> 
            <span class="n">if_exists</span><span class="o">=</span><span class="s">'append'</span><span class="p">,</span> 
            <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        
        <span class="n">df_today</span><span class="p">.</span><span class="n">to_sql</span><span class="p">(</span>
            <span class="n">name</span><span class="o">=</span><span class="sa">f</span><span class="s">'mart_</span><span class="si">{</span><span class="p">(</span><span class="n">yesterday</span> <span class="o">+</span> <span class="n">datetime</span><span class="p">.</span><span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="mi">1</span><span class="p">)).</span><span class="n">strftime</span><span class="p">(</span><span class="s">"%Y%m%d"</span><span class="p">)</span><span class="si">}</span><span class="s">'</span><span class="p">,</span>
            <span class="n">con</span><span class="o">=</span><span class="n">engine</span><span class="p">,</span>
            <span class="n">if_exists</span><span class="o">=</span><span class="s">'append'</span><span class="p">,</span>
            <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">engine</span><span class="p">.</span><span class="n">dispose</span><span class="p">()</span>

    <span class="n">get_logs_from_hdfs</span><span class="p">()</span> <span class="o">&gt;&gt;</span> <span class="n">transform</span><span class="p">()</span> <span class="o">&gt;&gt;</span> <span class="n">store_to_postgres</span><span class="p">()</span>
    
<span class="n">pipeline</span> <span class="o">=</span> <span class="n">batch_to_rdb</span><span class="p">()</span>
</code></pre></div></div>
<p>데이터 처리는 Pandas를 이용했습니다. Airflow 스크립트에서 데이터 처리를 하려고 했지만 Spark DataFrame을 사용하기 위해 SparkSession을 사용해야 하는데(제가 잘 몰라서 그런것일 수도 있습니다.) 에러 때문에 사용하지 못했습니다. HDFS에서 parquet 파일을 가져와 pyarrow를 이용하여 pandas DataFrame으로 변환하여 데이터 처리를 수행했습니다.</p>

<p><code class="language-plaintext highlighter-rouge">transform()</code> 과정에서 df_yesterday와 df_today 데이터프레임으로 나누는 코드가 존재합니다. 이것은 logstash가 UTC로 동작하기 때문입니다. 기록되는 날이 UTC 기준이라서 한국 시간과 9시간 차이가 나기 때문에 Redis에 같은 키에 다른 날짜의 로그가 들어오게 됩니다.</p>

<p>예를들면, UTC   2022-11-30의 데이터는 KST기준 2022-11-30 09:00:00부터 2022-12-01 08:59:59까지이므로 Redis에는 <code class="language-plaintext highlighter-rouge">20221130</code>키로 접근했을 때 2022-12-01 데이터가 들어와 있게 됩니다. 따라서 이를 나눠 DB에 적재하는 코드가 필요했습니다. DB에 나눠 적재하지 않으면 배치 처리할때 그 이전 날짜들의 테이블까지 모두 조회해야할 가능성이 있기 때문에 이를 방지하는 이유또한 있습니다.</p>

<p>airflow에 SparkSession으로 세션을 생성하면 30초의 timeout으로 DAG가 등록되지 않았습니다.(정확한 이유가 맞는지는 잘 모르겠습니다.) 그래서 SparkContext를 통해 hdfs에 접근하는 방법으로 배치 파일을 구성했습니다.</p>

<h3 id="postgresql-jupyter-notebook">PostgreSQL, Jupyter Notebook</h3>
<p>RDB로 PostgreSQL을 사용했습니다. PostgreSQL을 MySQL보다 자주 사용해서 익숙하기 때문에 선택했습니다. BI로 Jupyter Notebook을 사용했는데 똑같이 Apache Zeplin보다 익숙하기 때문에 선택했습니다.</p>

<p>Jupyter Notebook은 로그인 시 패스워드를 물어보지 않게 하면 토큰을 입력해야 하는데 Notebook 접속 시 Jupyter Notebook 도커의 로그에 있는 URL로 접속해야 하는 불편함이 있습니다.</p>]]></content><author><name>goooose</name></author><category term="data-engineer" /><category term="data-engineering" /><summary type="html"><![CDATA[Motivation 빅데이터를 지탱하는 기술을 읽다가 데이터 엔지니어링에 사용되는 플랫폼들을 전체 파이프라인으로 구축해보고 싶어서 이 사이드 프로젝트를 진행하게 되었습니다.]]></summary></entry><entry><title type="html">python으로 CNN 구현하기</title><link href="http://localhost:4000/pytorch/cnn-implementation/" rel="alternate" type="text/html" title="python으로 CNN 구현하기" /><published>2022-09-21T00:00:00+09:00</published><updated>2022-09-21T00:00:00+09:00</updated><id>http://localhost:4000/pytorch/cnn-implementation</id><content type="html" xml:base="http://localhost:4000/pytorch/cnn-implementation/"><![CDATA[<h2 id="related">Related</h2>
<blockquote>
  <p>이전 포스트에서 MLP를 구현했고 이번에는 CNN을 구현하는 삽질을 진행했습니다.<br />
여기서는 Conv2d의 구현에 대해서만 정리하려고 합니다. 밑바닥부터 구현하실때 도움이 되었으면 좋겠습니다.</p>
</blockquote>

<h2 id="cnn">CNN</h2>
<p>CNN은 [Conv2d + Pooling + (Activation)] 레이어가 수직으로 쌓여있는 뉴럴넷을 말합니다. 
구현해보려는 CNN의 구조는 다음과 같습니다.</p>
<ul>
  <li>Layer1 : Conv2d(1, 5, 5) -&gt; ReLU -&gt; MaxPool2d(2, 2)</li>
  <li>Layer2 : Conv2d(5, 7, 5) -&gt; ReLU -&gt; MaxPool2d(2, 2)</li>
  <li>Flatten Layer</li>
  <li>Linear Layer</li>
</ul>

<h2 id="conv2d">Conv2d</h2>
<h3 id="convolution">Convolution</h3>
<p>단순하게 for문 중첩으로 Convolution을 구현하면 연산속도가 너무 느려지기 때문에 다른 방법들을 찾아봤습니다.</p>
<ul>
  <li>Numpy를 이용하는 방법</li>
  <li>FFT를 이용하는 방법</li>
</ul>

<p>FFT(Fast Fourier Transform)를 사용하는 방법은 수식과 구현방법이 어려워서 포기하고 첫 번째 방법인 Numpy를 사용하는 방법을 선택했습니다. 코드는 스택 오버플로우에 있는 코드를 가져와서 사용했습니다.
<script src="https://gist.github.com/emeraldgoose/edd919bed30ae5ea2a1b021caaea33af.js"></script></p>

<p>동작방법은 다음과 같습니다.</p>
<ul>
  <li>적용할 이미지를 커널 크기의 맞게 잘라서 저장합니다.</li>
  <li>잘려진 이미지들을 하나씩 꺼내 커널과 element-wise product를 진행하여 더한 값들을 리턴합니다.</li>
  <li>for문으로 커널을 움직일 필요 없이 곱셈과 합 연산만 진행하므로 속도가 빠릅니다.</li>
</ul>

<h3 id="forward">Forward</h3>
<p>Conv2d 레이어의 forward를 먼저 보겠습니다.<br />
(3,3)인 입력 X, (2,2)인 가중치 W를 convolution해서 (2,2)인 출력 O를 계산한다고 가정합니다.<br />
<img src="https://drive.google.com/uc?export=view&amp;id=12LftVBInOBxYeZkTQ0gI7hVsN-ibOWTH" alt="" />
$o_{11} = k_{11}x_{11} + k_{12}x_{12} + k_{21}x_{21} + k_{22}x_{22}$</p>

<p>$o_{12} = k_{11}x_{12} + k_{12}x_{13} + k_{21}x_{22} + k_{22}x_{23}$</p>

<p>$o_{21} = k_{11}x_{21} + k_{12}x_{22} + k_{21}x_{31} + k_{22}x_{32}$</p>

<p>$o_{22} = k_{11}x_{22} + k_{12}x_{23} + k_{21}x_{32} + k_{22}x_{33}$</p>

<h3 id="backward">Backward</h3>
<p>이제 Conv2d 레이어의 backward를 계산해보겠습니다. dout은 뒤의 레이어에서 들어오는 gradient를 의미합니다.<br />
Backward 연산부터는 Foward의 그림과 같이 보면서 이해하시는 것을 추천드립니다.</p>

<p>가장 먼저, forward에서 계산한 모든 식을 weight에 대해 편미분을 시도합니다.</p>

<p>$\frac{do_{11}}{dk_{11}}=x_{11} \quad \frac{do_{11}}{dk_{12}}=x_{12} \quad \frac{do_{11}}{dk_{21}}=x_{21} \quad \frac{do_{11}}{dk_{22}}=x_{22}$</p>

<p>$\frac{do_{12}}{dk_{11}}=x_{12} \quad \frac{do_{12}}{dk_{12}}=x_{13} \quad \frac{do_{12}}{dk_{21}}=x_{22} \quad \frac{do_{12}}{dk_{22}}=x_{23}$</p>

<p>$\frac{do_{21}}{dk_{11}}=x_{21} \quad \frac{do_{21}}{dk_{12}}=x_{22} \quad \frac{do_{21}}{dk_{21}}=x_{31} \quad \frac{do_{21}}{dk_{22}}=x_{32}$</p>

<p>$\frac{do_{22}}{dk_{11}}=x_{22} \quad \frac{do_{22}}{dk_{12}}=x_{23} \quad \frac{do_{22}}{dk_{21}}=x_{32} \quad \frac{do_{22}}{dk_{22}}=x_{33}$</p>

<p>이제 weight의 gradient 하나만 계산해보면 다음과 같습니다.</p>

<p>$\frac{dL}{dk_{11}} = \frac{dL}{do_{11}} \cdot \frac{do_{11}}{dk_{11}} + \frac{dL}{do_{12}} \cdot \frac{do_{12}}{dk_{11}} + \frac{dL}{do_{21}} \cdot \frac{do_{21}}{dk_{11}} + \frac{dL}{do_{22}} \cdot \frac{do_{22}}{dk_{11}}$</p>

<p>$\frac{dL}{dk_{11}} = d_{11} \cdot \frac{do_{11}}{dk_{11}} + d_{12} \cdot \frac{do_{12}}{dk_{11}} + d_{21} \cdot \frac{do_{21}}{dk_{11}} + d_{22} \cdot \frac{do_{22}}{dk_{11}} $</p>

<p>위에서 계산한 값을 대입하면 다음과 같습니다.</p>

<p>$\frac{dL}{dk_{11}} = d_{11} \cdot x_{11} + d_{12} \cdot x_{12} + d_{21} \cdot x_{21} + d_{22} \cdot x_{22} $</p>

<p>따라서, <strong>weight의 gradient는 dout과 입력 X와의 convolution 연산과 같습니다.</strong><br />
bias는 forward때 덧셈으로 계산되므로 편미분 값이 1입니다. 그래서 bias의 gradient는 dout의 합으로 계산할 수 있습니다.
<script src="https://gist.github.com/emeraldgoose/d816ef2fddecef83236316f9316dcde0.js"></script></p>

<p>이제 conv layer에서 나오는 gradient를 입력 레이어 방향으로 전달하기 위한 계산을 진행하겠습니다.</p>

<p>이번에는 출력 O를 계산하는 forward 식에서 입력 x에 대해 편미분을 계산해두겠습니다.</p>

<p>$\frac{do_{11}}{dx_{11}}=k_{11} \quad \frac{do_{11}}{dx_{12}}=k_{12} \quad \frac{do_{11}}{dx_{21}}=k_{21} \quad \frac{do_{11}}{dx_{22}}=k_{22}$</p>

<p>$\frac{do_{12}}{dx_{12}}=k_{11} \quad \frac{do_{12}}{dx_{13}}=k_{12} \quad \frac{do_{12}}{dx_{22}}=k_{21} \quad \frac{do_{12}}{dx_{23}}=k_{22}$</p>

<p>$\frac{do_{21}}{dx_{21}}=k_{11} \quad \frac{do_{21}}{dx_{22}}=k_{12} \quad \frac{do_{21}}{dx_{31}}=k_{21} \quad \frac{do_{21}}{dx_{32}}=k_{22}$</p>

<p>$\frac{do_{22}}{dx_{22}}=k_{11} \quad \frac{do_{22}}{dx_{23}}=k_{12} \quad \frac{do_{22}}{dx_{32}}=k_{21} \quad \frac{do_{22}}{dx_{33}}=k_{22}$</p>

<p>다음 입력값 각각에 대한 gradient인 $\frac{dL}{dX}$값을 다음과 같이 계산할 수 있습니다.</p>

<p>$\frac{dL}{dx_{11}} = \frac{dL}{do_{11}} \cdot \frac{do_{11}}{dx_{11}}$</p>

<p>$\frac{dL}{dx_{12}} = \frac{dL}{do_{12}} \cdot \frac{do_{12}}{dx_{12}} + \frac{dL}{do_{11}} \cdot \frac{do_{11}}{dx_{12}}$</p>

<p>$\frac{dL}{dx_{13}} = \frac{dL}{do_{12}} \cdot \frac{do_{12}}{dx_{13}}$</p>

<p>$\frac{dL}{dx_{21}} = \frac{dL}{do_{21}} \cdot \frac{do_{21}}{dx_{21}} + \frac{dL}{do_{11}} \cdot \frac{do_{11}}{dx_{21}}$</p>

<p>$\frac{dL}{dx_{22}} = \frac{dL}{do_{22}} \cdot \frac{do_{22}}{dx_{22}} + \frac{dL}{do_{21}} \cdot \frac{do_{21}}{dx_{22}} + \frac{dL}{do_{12}} \cdot \frac{do_{12}}{dx_{22}} + \frac{dL}{do_{11}} \cdot \frac{do_{11}}{dx_{22}}$</p>

<p>$\frac{dL}{dx_{23}} = \frac{dL}{do_{22}} \cdot \frac{do_{22}}{dx_{23}} + \frac{dL}{do_{12}} \cdot \frac{do_{12}}{dx_{23}}$</p>

<p>$\frac{dL}{dx_{31}} = \frac{dL}{do_{21}} \cdot \frac{do_{21}}{dx_{31}}$</p>

<p>$\frac{dL}{dx_{32}} = \frac{dL}{do_{22}} \cdot \frac{do_{22}}{dx_{32}} + \frac{dL}{do_{21}} \cdot \frac{do_{21}}{dx_{32}}$</p>

<p>$\frac{dL}{dx_{33}} = \frac{dL}{do_{22}} \cdot \frac{do_{22}}{dx_{33}}$</p>

<p>위의 식에 다시 정리해둔 값을 대입하면 다음과 같습니다.</p>

<p>$\frac{dL}{dx_{11}} = d_{11} \cdot k_{11}$</p>

<p>$\frac{dL}{dx_{12}} = d_{12} \cdot k_{11} + d_{11} \cdot k_{12}$</p>

<p>$\frac{dL}{dx_{13}} = d_{12} \cdot k_{12}$</p>

<p>$\frac{dL}{dx_{21}} = d_{21} \cdot k_{11} + d_{11} \cdot k_{21}$</p>

<p>$\frac{dL}{dx_{22}} = d_{22} \cdot k_{11} + d_{21} \cdot k_{12} + d_{12} \cdot k_{21} + d_{11} \cdot k_{22}$</p>

<p>$\frac{dL}{dx_{23}} = d_{22} \cdot k_{12} + d_{12} \cdot k_{22}$</p>

<p>$\frac{dL}{dx_{31}} = d_{21} \cdot k_{21}$</p>

<p>$\frac{dL}{dx_{32}} = d_{22} \cdot k_{21} + d_{21} \cdot k_{22}$</p>

<p>$\frac{dL}{dx_{33}} = d_{22} \cdot k_{22}$</p>

<p>식만 보고서는 어떤식으로 계산되어야 하는지 감이 잘 안옵니다. 이것을 그림으로 표현했을 때 정말 쉽게 이해가 가능합니다. 파란색 테두리가 weight, 빨간색 테두리가 dout, 노란색 테두리는 계산에 참여하는 cell입니다.</p>

<p>$\frac{dL}{dx_{11}} = d_{11} \cdot k_{11}$</p>

<p><img src="https://drive.google.com/uc?export=view&amp;id=18KIBdo2AbiexxzKaL15siJAFc5KtVpbW" alt="" width="300" /></p>

<p>$\frac{dL}{dx_{12}} = d_{12} \cdot k_{11} + d_{11} \cdot k_{12}$</p>

<p><img src="https://drive.google.com/uc?export=view&amp;id=1_5_BHHzLyqCyAJaaincxoM0fSg0jVJ2V" alt="" width="200" /></p>

<p>$\frac{dL}{dx_{13}} = d_{12} \cdot k_{12}$</p>

<p><img src="https://drive.google.com/uc?export=view&amp;id=1pW8dBolmXzuenj6Gj6BQWuGec-McJqtQ" alt="" width="300" /></p>

<p>파란색 테두리인 weight를 보시면 아시겠지만 왼쪽 상단이 k22로 시작합니다. 즉, weight를 뒤집은 형태로 convolution 연산을 진행합니다.<br />
따라서, <strong>dout을 적절하게 padding하고 weight를 뒤집어서 convolution을 진행한 결과가 입력에 대한 gradient입니다.</strong><br />
<script src="https://gist.github.com/emeraldgoose/3458dac08e743c36beec99446fc3231f.js"></script></p>

<h2 id="crossentropyloss">CrossEntropyLoss</h2>
<p>이전에 구현했던 CrossEntropyLoss는 log를 취하는 과정에서 입력값이 음수가 들어오는 경우 에러가 일어납니다.</p>

<p>Pytorch의 CrossEntropyLoss는 Softmax와 NLLLoss(Negative Log Likelihood)로 구성되어 있습니다. Softmax와 NLLLoss로 구현하게 되면 음수 입력에 대해서도 cross entropy 값을 구할 수 있습니다.</p>

<h2 id="result">Result</h2>
<p>저번 포스팅과 똑같이 MNIST 5000장을 훈련 데이터로 사용하고 1000장을 테스트 데이터로 사용했습니다.<br />
<img src="https://drive.google.com/uc?export=view&amp;id=1vBR0h4xl5xUitvcgjCtPi8VpBcrbUwVD" alt="" width="500" /><br />
<img src="https://drive.google.com/uc?export=view&amp;id=1DNukdv1AXX7Xfv7ODVPQU9xiKRQemhrj" alt="" width="500" /></p>

<p>이전 MLP보다 사이즈가 작아서 그런지 같은 10 epoch에도 Accuracy 90%를 넘지 못했습니다. 그래도 loss도 잘 떨어지고 ACC도 잘 증가하는 형태를 보였습니다.</p>

<p>이번 구현에서 가장 어려웠던 점은 Conv2d의 backward 구현이었습니다. 정리된 내용은 2차원 배열을 가지고 계산한 내용인데 직접 구현한 Conv2d Layer는 channel까지 포함시킨 3차원(Channel, Height, Width) 입출력을 계산해야 합니다.</p>

<p>수식을 다시 계산하고 구현된 코드를 보면서 어디에 값이 저장되어야 하는지 새롭게 정리해서 다시 구현을 진행할 수 있었습니다. 그리고 numpy 없이 구현하기 위해 numpy의 함수들도 새롭게 작성했습니다. 만약 구현을 한다면 Numpy 사용을 적극 권장합니다…</p>

<h3 id="code">Code</h3>
<ul>
  <li><a href="https://github.com/emeraldgoose/hcrot">https://github.com/emeraldgoose/hcrot</a></li>
</ul>

<h2 id="reference">Reference</h2>
<ul>
  <li><a href="https://stackoverflow.com/a/43087771">Convolve2d(StackOverflow)</a></li>
  <li><a href="https://ratsgo.github.io/deep%20learning/2017/04/05/CNNbackprop/">https://ratsgo.github.io/deep%20learning/2017/04/05/CNNbackprop/</a></li>
  <li><a href="https://velog.io/@changdaeoh/backpropagationincnn">https://velog.io/@changdaeoh/backpropagationincnn</a></li>
  <li><a href="https://towardsdatascience.com/backpropagation-in-a-convolutional-layer-24c8d64d8509">https://towardsdatascience.com/backpropagation-in-a-convolutional-layer-24c8d64d8509</a></li>
  <li><a href="https://towardsdatascience.com/forward-and-backward-propagation-of-pooling-layers-in-convolutional-neural-networks-11e36d169bec">https://towardsdatascience.com/forward-and-backward-propagation-of-pooling-layers-in-convolutional-neural-networks-11e36d169bec</a></li>
</ul>]]></content><author><name>goooose</name></author><category term="Pytorch" /><category term="torch" /><summary type="html"><![CDATA[Related 이전 포스트에서 MLP를 구현했고 이번에는 CNN을 구현하는 삽질을 진행했습니다. 여기서는 Conv2d의 구현에 대해서만 정리하려고 합니다. 밑바닥부터 구현하실때 도움이 되었으면 좋겠습니다.]]></summary></entry><entry><title type="html">Python으로 딥러닝 구현하기</title><link href="http://localhost:4000/pytorch/dl-implement/" rel="alternate" type="text/html" title="Python으로 딥러닝 구현하기" /><published>2022-07-04T00:00:00+09:00</published><updated>2022-07-04T00:00:00+09:00</updated><id>http://localhost:4000/pytorch/dl-implement</id><content type="html" xml:base="http://localhost:4000/pytorch/dl-implement/"><![CDATA[<blockquote>
  <p>모기업 코딩테스트에 파이썬 기본 라이브러리로만 MLP를 구현하는 문제가 나왔던 적이 있습니다. 당시에 학습이 되지 않아 코딩테스트에서 떨어졌었고 구현하지 못했던 것이 계속 생각나서 구현해봤습니다.</p>
</blockquote>

<h2 id="계획">계획</h2>
<p>데이터셋을 MNIST로 잡고 MLP를 구현하고자 했습니다. 코딩테스트때도 입력으로 MNIST와 비슷한 값이 들어왔었기 때문입니다.</p>

<p>레이어는 총 3개로 input -&gt; (Linear -&gt; Activation) -&gt; (Linear -&gt; Activation) -&gt; (Linear -&gt; Softmax) -&gt; output 으로 생각하고 각 모듈 구현을 시작했습니다.</p>

<h2 id="forward--backward-propagation">Forward &amp; Backward Propagation</h2>
<p>모델이 학습을 하기 위해서는 역전파(backpropagation)가 진행되어야 합니다. 각 모듈들의 미분값을 출력하고 chain rule에 의해 값들을 곱해가면서 Linear 레이어의 가중치와 바이어스를 업데이트해야 합니다.</p>

<p>먼저, 아래처럼 구성된 모델이 있다고 가정하고 순전파(Feedforward)때 계산되는 과정을 살펴보겠습니다.</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Model(
  (layer1): Sequential(
    (0): Linear(in_features=784, out_features=256, bias=True)
    (1): Sigmoid()
  )
  (layer2): Sequential(
    (0): Linear(in_features=256, out_features=10, bias=True)
    (1): Softmax()
  )
)
</code></pre></div></div>
<p>$y_1 = \sigma_{1}(z_1) = \sigma_1(w_1x + b_1), \sigma_{1} = \text{sigmoid}$</p>

<p>$\hat{y} = \sigma_{2}(z_2) = \sigma_{2}(w_2y_1+b_2), \sigma_{2} = \text{softmax}$</p>

<p>$L_{\text{MSE}} = \sum(\hat{y}-{y})^2$</p>

<p>이제, 위 식을 거꾸로 돌려가면서 역전파를 진행합니다.</p>

<p>$W_2$에 대해 편미분된 값을 먼저 구하면 다음과 같이 진행됩니다.</p>

<p>$\frac{\partial L}{ \partial w_2}=\frac{\partial L}{\partial \hat{y}} \cdot \frac{\partial \hat{y}}{dz_2} \cdot \frac{\partial z_2}{\partial w_2}$</p>

<p>${\partial \hat{y} \over \partial z_2} = \sigma_2(z_2)(\delta_{ij} - \sigma_2(z_2)), \ \delta_{ij}=
    \begin{cases}
        1, &amp; i=j \\ 0, &amp; i \ne j
    \end{cases}
$</p>

<p>$\frac{\partial L}{\partial w_2} = \frac{2}{m}(\hat{y}-y) \cdot \sigma_2(z_2)(\delta_{ij} - \sigma_2(z_2)) \cdot y_1$</p>

<p>$W_1$에 대해 편미분된 값을 구하면 다음과 같이 진행됩니다.</p>

<p>$\frac{\partial L}{\partial w_1}=\frac{\partial L}{\partial \hat{y}} \cdot \frac{\partial \hat{y}}{\partial z_2} \cdot \frac{\partial z_2}{\partial y_1} \cdot \frac{\partial y_1}{\partial z_1} \cdot \frac{\partial z_1}{\partial w_1}$</p>

<p>${\partial y_1 \over \partial z_1} = \sigma_1(z_1)(1 - \sigma_1(z_1)) = y_1(1 - y_1)$</p>

<p>$\frac{\partial L}{\partial w_1}= \frac{2}{m}(\hat{y}-y) \cdot \sigma_2(z_2)(\delta_{ij} - \sigma_2(z_2)) \cdot w_2 \cdot y_1 \cdot (1 - y_1) \cdot x$</p>

<p>gradient의 계산에서 마지막 곱에는 <strong>입력값</strong>에 대해 dot product하고 입력 레이어 방향으로 <strong>이전 레이어의 weight</strong>를 dot product해야 합니다. 따라서 Linear 레이어는 입력값을 저장해야 backward 계산에서 사용할 수 있습니다.
<script src="https://gist.github.com/emeraldgoose/5bbdab6c658bc73da63bbc694bcf5f2a.js"></script></p>

<p>또한, sigmoid를 통과한 출력값들은 역전파때 <strong>element-wise product</strong>를 진행해야 합니다. 활성화함수는 입력값 각각에 대해 함수를 통과시키므로 역전파때도 똑같이 진행되어야 하기 때문입니다. softmax는 element-wise independent하지 않아 element-wise product를 수행해서는 안됩니다.</p>

<p>이 역전파를 구현하기 위해 레이어마다 backward()함수를 추가하여 gradient를 계산하고 Optimizer를 이용하여 weight와 bias를 학습할 수 있습니다.<br />
<script src="https://gist.github.com/emeraldgoose/f256205e7bed257c9b1c5ecbcfc409e5.js"></script></p>

<h2 id="결과">결과</h2>
<p>MNIST 5000장을 훈련데이터로 사용하고 1000장을 테스트데이터로 사용했습니다.</p>

<p><img src="https://drive.google.com/uc?export=view&amp;id=1k18xXPI4qMx31qgSTajBwQ6NwjycTpkr" alt="" width="400" />
<img src="https://drive.google.com/uc?export=view&amp;id=1Pzta5dtXVxduFsIgHGaSqsHOtKsh6jSh" alt="" width="400" /></p>

<p>10 에포크에도 loss가 잘 떨어지고 Accuracy도 잘 증가하는 것을 볼 수 있습니다.</p>

<p>벡터 계산이나 다른 수식 계산에 도움이 되는 numpy 없이 구현하려고 하니 코드에서 실수를 많이 했습니다. 계산 결과를 확인하기 위해 torch나 numpy에 있는 똑같은 함수를 불러오고 저의 코드를 불러와 계산결과가 맞는지 계속 확인했습니다.</p>

<p>torch로 모델을 학습하는 방법과 최대한 유사하게 작성할 수 있도록 구현하고자 했습니다. torch에서는 autograd 기능과 텐서를 사용할 수 있어 사용자가 쉽게 모델을 학습할 수 있었습니다.(라이브러리 개발자분들 존경합니다.) 하지만 직접 구현하려면 역전파를 위해 레이어마다 미분을 진행해줘야 하는 과정이 추가되어 생각보다 구현이 어려웠습니다.</p>

<h3 id="문제점">문제점</h3>
<p>가장 큰 문제점은 e^x 함수의 Overflow 현상입니다. 입력값이 음수이면서 큰 수일 때 softmax와 sigmoid 계산에서 overflow 현상이 일어났습니다.</p>

<h2 id="앞으로">앞으로</h2>
<p>MLP에 사용되는 레이어들만 구현되었지만 CNN이나 RNN을 사용할 수 있도록 레이어들을 추가할 생각입니다. 구현하기 위해서 수식이나 역전파 과정들을 찾아보니 난이도가 있어 보여서 언제 추가할 수 있을지는 잘 모르겠습니다…</p>

<h2 id="코드">코드</h2>
<blockquote>
  <p>구현된 코드는 깃허브에 있습니다.<br />
<a href="https://github.com/emeraldgoose/hcrot">https://github.com/emeraldgoose/hcrot</a></p>
</blockquote>

<h2 id="reference">Reference</h2>
<ul>
  <li><a href="http://taewan.kim/post/sigmoid_diff/">http://taewan.kim/post/sigmoid_diff/</a></li>
  <li><a href="https://ratsgo.github.io/deep%20learning/2017/10/02/softmax/">https://ratsgo.github.io/deep%20learning/2017/10/02/softmax/</a></li>
  <li><a href="https://pytorch.org/docs/stable/generated/torch.nn.Linear.html">https://pytorch.org/docs/stable/generated/torch.nn.Linear.html</a></li>
  <li><a href="https://velog.io/@gjtang/Softmax-with-Loss-%EA%B3%84%EC%B8%B5-%EA%B3%84%EC%82%B0%EA%B7%B8%EB%9E%98%ED%94%84">https://velog.io/@gjtang/Softmax-with-Loss-%EA%B3%84%EC%B8%B5-%EA%B3%84%EC%82%B0%EA%B7%B8%EB%9E%98%ED%94%84</a></li>
  <li>[https://aew61.github.io/blog/artificial_neural_networks/1_background/1.b_activation_functions_and_derivatives.html](https://aew61.github.io/blog/artificial_neural_networks/1_background/1.b_activation_functions_and_derivatives.html</li>
</ul>]]></content><author><name>goooose</name></author><category term="Pytorch" /><category term="torch" /><summary type="html"><![CDATA[모기업 코딩테스트에 파이썬 기본 라이브러리로만 MLP를 구현하는 문제가 나왔던 적이 있습니다. 당시에 학습이 되지 않아 코딩테스트에서 떨어졌었고 구현하지 못했던 것이 계속 생각나서 구현해봤습니다.]]></summary></entry><entry><title type="html">On the Effect of Pretraining Corpora on In-context Learning by a LLM</title><link href="http://localhost:4000/paper/On-the-effect-of-corpora/" rel="alternate" type="text/html" title="On the Effect of Pretraining Corpora on In-context Learning by a LLM" /><published>2022-06-06T00:00:00+09:00</published><updated>2022-06-06T00:00:00+09:00</updated><id>http://localhost:4000/paper/On-the-effect-of-corpora</id><content type="html" xml:base="http://localhost:4000/paper/On-the-effect-of-corpora/"><![CDATA[<blockquote>
  <p>모두의연구소에서 논문저자가 직접 논문을 리뷰해주는 세미나가 열렸습니다. 주제가 재밌어 보여 발표를 듣고 논문을 다시 읽어 리뷰해보려고 합니다.</p>
</blockquote>

<h2 id="motivation">Motivation</h2>
<p>GPT라는 Large Scale Langauge Model이 등장하면서 언어 모델의 새로운 시대를 열게 되었습니다. GPT에서 In-context Learning이라는 방식을 사용하는 점이 특징입니다.</p>

<h3 id="in-context-learning">In-context Learning</h3>
<p>In-context Learning은 사전학습 모델에 풀고자 하는 태스크를 input으로 넣는 방식을 말합니다. 예제에 따라 zero-shot, one-shot, few-shot learning으로 나뉘어집니다.</p>
<ul>
  <li>Task description + example(zero/one/few shot) -&gt; answer</li>
</ul>

<h2 id="task-definition">Task Definition</h2>
<p>모델은 HyperCLOVA를 사용하고 1.3B의 파라미터를 가지고 있습니다.</p>

<p>Corpus는 네이버블로그, 네이버카페, 네이버뉴스, 네이버댓글, 네이버지식인, 위키피디아, 모두의말뭉치를 사용합니다.</p>

<p>Downstream Task로는 NSMC(영화리뷰), KorQuAD, KLUE-YNAT(뉴스제목분류), AI hub(한영/영한 번역)로 진행합니다.</p>

<h2 id="experimental-results">Experimental Results</h2>
<h3 id="effect-of-corpus-source">Effect of Corpus Source</h3>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1lkOE5QdbilT_WV80gvNVn-J6-IJLtIoT" alt="" /><br />
테이블에서 말뭉치의 종류에 따라 다르게 in-context learning 성능이 나타는 것을 볼 수 있습니다.</p>
<ul>
  <li>블로그 데이터(Blog)로 학습한 모델이 카페(Cafe)나 뉴스(News)로 학습한 모델보다 few-shot 성능이 ALL 모델에 근접합니다.
    <ul>
      <li>ALL 모델은 모든 데이터를 학습한 모델을 말합니다.</li>
    </ul>
  </li>
  <li>모두의말뭉치(Modu)로 학습한 모델은 카페나 뉴스로 학습한 모델보다 좋은 성능을 냅니다. 하지만 Modu 사이즈는 카페나 뉴스 말뭉치의 1/10배보다 작습니다.</li>
</ul>

<h3 id="effect-of-corpus-size">Effect of Corpus size</h3>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1SgN5NThYfhdt8z0k4_0veZx7mzvi8uQv" alt="" /><br />
말뭉치 사이즈를 150B에서 56B로 줄였을 때는 성능이 비슷합니다. 말뭉치 사이즈가 성능을 감소시키는 것은 아닙니다.<br />
하지만 6B 토큰으로 학습한 모델은 150B 토큰의 카페와 뉴스 말뭉치로 학습한 모델의 성능보다 낮게 나옵니다.<br />
위의 Table 2에서는 블로그 54B 토큰과 27B 토큰 데이터를 학습한 결과가 있습니다. 블로그 150B 토큰 데이터와 54B 토큰 데이터로 학습한 모델의 성능이 비슷하지만 ALL 6B 토큰과 블로그 27B 토큰 데이터는 블로그 54B 토큰 데이터로 학습한 모델보다 성능이 나오지 않습니다.</p>

<p><img src="https://drive.google.com/uc?export=view&amp;id=1Uh0J72xia1RNygMLZexzuUYdpYirsMmz" alt="" /></p>

<p>fig 3에서 모델의 사이즈와 토큰 사이즈에 대해 학습한 결과를 보여줍니다. 
150B 토큰으로 학습한 모델보다 56B 토큰으로 학습한 모델의 성능 감소가 크게 나타나지는 않습니다.</p>

<h3 id="effect-of-combining-corpora">Effect of Combining Corpora</h3>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1lmabxCG-WuuldhZs4NRPmr1oetgdIABI" alt="" /><br />
Table 4에서 in-context learning에서 능력이 두 말뭉치 조합에 의해 발생될 수 있음을 보여줍니다.</p>
<ul>
  <li>지식인(KiN) + 위키피디아(Ency) 모델은 대부분의 태스크에서 성능이 좋습니다.</li>
  <li>카페(Cafe) + 지식인(KiN) 모델도 대부분의 태스크에서 성능이 좋아졌습니다. 카페와 지식인 각각의 데이터로만 학습한 모델들은 해당 태스크에서 성능이 좋지 못했습니다.(Table 2)</li>
</ul>

<p>이런 현상은 Multi Task Learning에 의해 발생한 것으로 생각됩니다. Multi Task Learning은 연관있는 Task를 같이 학습하는 방법을 말하며 Object function이 다양한 Next Word Prediction을 학습하기 때문에 일반화 과정이 없는 능력을 촉진한 것으로 보입니다. 지식인 데이터와 위키피디아 데이터로 Next Word Prediction을 수행하면서 MRC task를 학습한 것으로 보여집니다.</p>

<p>그러나 말뭉치 조합이 항상 성능을 향상시키지는 않습니다.</p>
<ul>
  <li>카페와 뉴스 데이터를 조합한 경우 KorQuAD 태크스에서 각각 말뭉치로 학습한 성능보다 조금 나아지지만 나머지 태스크(NSMC, KLUE-YNAT)에서 성능이 낮아집니다.</li>
</ul>

<h3 id="effect-of-domain-relevance">Effect of Domain Relevance</h3>
<p>Table 2에서 말뭉치와 Downstream task와의 관계가 few-shot 성능을 항상 보장하지는 않습니다.</p>
<ul>
  <li>지식인(KiN)과 위키피디아(Ency) 모델은 KorQuAD 태스크를 잘 수행하지 못합니다.</li>
  <li>KLUE-YNAT에는 뉴스 헤드라인 쿼리가 포함되어 있음에도 뉴스(News) 모델은 KLUE-YNAT 태스크를 잘 수행하지 못합니다.</li>
</ul>

<p>Table 4에서 뉴스 + 지식인 + 위키 모델이 지식인 + 위키 모델보다 KLUE-YNAT F1 스코어가 낮습니다.</p>
<ul>
  <li>YNAT에서 성능이 좋았던 지식인 + 위키 모델에서 뉴스를 추가한 것뿐인데 성능이 낮아졌습니다.</li>
</ul>

<p><img src="https://drive.google.com/uc?export=view&amp;id=1EeNiav_njdPKMivohvgnTnGyrvosFUCn" alt="" /><br />
말뭉치와 태스크와의 Vocabulary overlap을 조사한 히트맵입니다.<br />
높은 Vocabulary overlap이 높은 Downstream task 성능을 가져오지는 못합니다.</p>
<ul>
  <li>모두의말뭉치(Modu)는 번역(AI Hub)태스크와 높은 오버래핑을 보이지만 블로그(Blog)나 지식인(KiN) 모델보다 성능이 낮습니다.</li>
</ul>

<p>하지만 지식인(KiN) 모델에서 번역(AI Hub) 태스크에서 반례가 존재합니다.</p>
<ul>
  <li>지식인 데이터는 한국어로 영어에 대한 질문이 많습니다. 지식인 모델은 한영 문장 패턴들을 학습할 수 있습니다.</li>
  <li>지식인 모델이 한영 번역 태스크는 성능이 나오지만 나머지 태스크에서는 성능이 낮게 나옵니다.</li>
</ul>

<p><img src="https://drive.google.com/uc?export=view&amp;id=11aNe9bnSwZhtoYQJuy5hu1hMtqLTQMfs" alt="" /><br />
<img src="https://drive.google.com/uc?export=view&amp;id=1-z_oVEl3f5ubpMoLls8QXcLn1lsGR5D5" alt="" /></p>

<p>Zero-shot에서 도메인 관련성이 이런 현상을 더 잘 나타냅니다.</p>
<ul>
  <li>뉴스 말뭉치는 KLUE-YNAT 태스크에 도움을 줍니다. Table 3, 5에서 뉴스 말뭉치를 추가했을 때 성능이 오르는 것을 볼 수 있습니다. 모든 데이터를 학습하는 ALL 모델보다 나은 성능을 보입니다.</li>
  <li>지식인 말뭉치 자체로는 Zero-shot에서 few-shot보다 낮은 성능을 보입니다. 그러나 지식인 데이터를 다른 말뭉치와 조합하는 경우 성능이 오르는 것을 볼 수 있습니다.</li>
</ul>

<h3 id="perplexity-and-downstream-task">Perplexity and Downstream Task</h3>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1GTFoIPfgqt3nxs86qTdAqUrk8qU8g5iU" alt="" /><br />
Figure 2는 각 in-context learning 성능을 ALL 모델의 성능으로 나눠 Normalizing한 결과입니다. Perplexity와 in-context 성능간의 관계를 알아보기 위해 진행했으나 둘의 관계가 있다는 가설을 세울 수 없었습니다.</p>
<ul>
  <li>Table 2에서 블로그 모델은 낮은 PPL을 가지지만 높은 성능을 가집니다. 반면, 위키피디아 모델은 높은 PPL을 가지지만 낮은 성능을 가집니다.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>
<p>이번 연구에서 발견한 점은 다음과 같습니다.</p>
<ol>
  <li>말뭉치에 따라 성능이 크게 달라질 수 있다. Perplexity가 높다고 성능이 꼭 높은 것은 아니다.
    <ul>
      <li>학습 말뭉치 선정 시 Few-shot에서 PPL 기반이 적합하지 않을 수 있습니다.</li>
    </ul>
  </li>
  <li>말뭉치를 섞으면 없던 능력이 생기기도 한다.</li>
  <li>태스크와 비슷한 말뭉치가 사전훈련에 포함되더라도 성능이 꼭 좋아지는 것은 아니다.</li>
</ol>

<p>이번 연구에서는 하이퍼클로바를 이용하여 말뭉치 역할이 중요함을 알 수 있었습니다. 아쉬운 점으로는 한국어 데이터와 한국어 모델에 대해서만 실험했기 때문에 영어로 확장할 필요가 있어 보입니다. 그리고 사전학습 방법이 Next Word Prediction만 있는 것도 추가 연구가 필요해보입니다.</p>

<p>하지만 모델이나 학습 방법에서의 관점이 아닌 Corpus 관점에서 연구가 진행된 점에서 생각보다 재밌었던 논문이었습니다.</p>]]></content><author><name>goooose</name></author><category term="paper" /><category term="Corpus" /><summary type="html"><![CDATA[모두의연구소에서 논문저자가 직접 논문을 리뷰해주는 세미나가 열렸습니다. 주제가 재밌어 보여 발표를 듣고 논문을 다시 읽어 리뷰해보려고 합니다.]]></summary></entry><entry><title type="html">Kubernetes</title><link href="http://localhost:4000/ops/kubenetes-overview/" rel="alternate" type="text/html" title="Kubernetes" /><published>2022-05-15T00:00:00+09:00</published><updated>2022-05-15T00:00:00+09:00</updated><id>http://localhost:4000/ops/kubenetes-overview</id><content type="html" xml:base="http://localhost:4000/ops/kubenetes-overview/"><![CDATA[<h2 id="컨테이너-기반-배포">컨테이너 기반 배포</h2>
<p>애플리케이션 배포 방식은 물리적인 컴퓨터에 OS와 APP을 설치하여 서비스하던 방식에서 가상화 배포 방식으로 변화했습니다. 가상화 방식은 가상머신 성능을 각각 관리하면서 자원 상황에 따라 조절할 수 있습니다. 그러나 가상머신마다 OS를 새로 설치해야 하고 용량 또한 큽니다.</p>

<p>컨테이너 기반 배포가 등장하면서 Host OS 위에 컨테이너 런타임이 올라가고 그 위로 컨테이너가 올라가게 되었습니다. 컨테이너 기반 배포는 가상화 배포 방식과 비슷하지만 컨테이너는 Host OS의 API를 가져다 쓰는 가상머신입니다. 가상머신이라는 격리된 메모리, 디스크, 네트워크, IO 인터페이스 등을 할당받지 않아서 오버헤드를 줄일 수 있습니다.</p>

<h3 id="쿠버네티스">쿠버네티스</h3>
<p>도커는 컨테이너 기반의 오픈소스 가상화 플랫폼을 말합니다. 도커를 사용해서 애플리케이션을 서비스 단위로 분할하여 배포할 수 있지만 서비스마다 배포해야 하는 단점이 있습니다. 다수의 컨테이너를 관리할 필요가 생기면서 <strong>컨테이너 오케스트레이터</strong>라는 기능을 많은 회사들이 서비스로 내놓았습니다.</p>

<p>그 중 하나가 <strong>쿠버네티스</strong>입니다. 쿠버네티스는 규모에 맞는 컨테이너를 배포하는데 필요한 오케스트레이션 및 관리기능을 제공합니다.</p>

<h3 id="쿠버네티스-기능">쿠버네티스 기능</h3>
<ul>
  <li>시간대별로 서비스의 트래픽이 달라지는 경우 Auto Scaling 기능을 통해 자원의 양을 조절할 수 있습니다.</li>
  <li>Auto Healing 기능을 통해 장애가 난 서버의 자리를 여분의 서버 하나가 자동으로 대체합니다.</li>
  <li>서비스의 버전 업데이트가 있는 경우 Deployment 오브젝트를 통해 업데이트 방식에 대해 자동적으로 처리되도록 합니다.</li>
</ul>

<h2 id="쿠버네티스-overview">쿠버네티스 Overview</h2>
<p>쿠버네티스 클러스터는 서버 하나를 Master, 다른 서버를 Node라 하고 하나의 Master에 여러 Node들이 연결되게 합니다. 마스터는 쿠버네티스의 전반적인 기능들을 컨트롤하고 노드들이 자원을 제공합니다. 만약, 클러스터의 자원을 늘리고 싶다면 노드들을 추가해주면 됩니다.</p>

<p>클러스터 안에 쿠버네티스 오브젝트들은 독립된 Namespace라는 공간에 들어갑니다. Namespace에는 Pod들이 있고 외부로부터 IP를 할당해주는 서비스가 있습니다. 그리고 다른 Namespace안 Pod끼리는 연결이 불가능합니다. Pod가 문제가 생겨 재할당이 되면 기존 Pod 안 데이터들이 날라갑니다. 그래서 Volume을 만들어 데이터를 하드에 별도로 저장하게 할 수 있습니다.</p>

<p>Namespace에는 ResourceQuota와 LimitRange를 달아서 하나의 Namespace에서 사용할 수 있는 자원의 양(CPU, 메모리)을 한정할 수 있습니다.</p>

<p>Pod를 컨트롤하는 Controller는 다음과 같습니다.</p>
<ul>
  <li>ReplicaSet
    <ul>
      <li>Pod이 죽으면 다시 살리거나 스케일링이 가능합니다.</li>
    </ul>
  </li>
  <li>Deployment
    <ul>
      <li>배포 후 Pod들을 업그레이드합니다. 문제 발생 시 롤백이 가능합니다.</li>
    </ul>
  </li>
  <li>DaemonSet
    <ul>
      <li>한 노드에 Pod 하나씩만 유지되도록 합니다.</li>
    </ul>
  </li>
  <li>Job
    <ul>
      <li>어떤 특정 작업만 하고 종료를 시켜야 할 때 사용합니다.</li>
      <li>이런 Job을 주기적으로 실행해야 한다면 Cronjob을 사용합니다.</li>
    </ul>
  </li>
</ul>

<h2 id="minikube">minikube</h2>
<p>쿠버네티스를 정확하게 실습하려면 3대의 서버가 필요하지만 간단하게 <code class="language-plaintext highlighter-rouge">minikube</code>라는 도구를 이용하여 실습해볼 수 있습니다.</p>
<ul>
  <li>맥 기준 홈브류를 이용해서 쉽게 설치할 수 있습니다. 윈도우는 따로 설치파일이 필요합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">brew install minikube</code></li>
</ul>

<h3 id="minikube-명령어">minikube 명령어</h3>
<ul>
  <li>버전관리 <code class="language-plaintext highlighter-rouge">minikube version</code></li>
  <li>가상머신 시작
    <ul>
      <li>x86 <code class="language-plaintext highlighter-rouge">minikube start -driver=hyperkit</code></li>
      <li>M1 <code class="language-plaintext highlighter-rouge">minikube start --driver=docker</code></li>
      <li>driver 에러 발생 시 <code class="language-plaintext highlighter-rouge">minikube start --driver=virtualbox</code></li>
      <li>특정 버전 실행 <code class="language-plaintext highlighter-rouge">minikube start --kubernetes-version=v.1.23.1</code></li>
    </ul>
  </li>
  <li>상태확인 <code class="language-plaintext highlighter-rouge">minikube status</code></li>
  <li>정지 <code class="language-plaintext highlighter-rouge">minikube stop</code></li>
  <li>삭제 <code class="language-plaintext highlighter-rouge">minikube delete</code></li>
  <li>IP확인 <code class="language-plaintext highlighter-rouge">minikube ip</code></li>
</ul>

<h3 id="kubectl-명령어">kubectl 명령어</h3>
<p><code class="language-plaintext highlighter-rouge">kubectl</code>은 쿠버네티스 클러스터에 명령어를 전달하는 도구입니다. 쿠버네티스에서는 대시보드를 제공하지만 노출되지 말아야할 값들이 노출되어서 대시보드를 권장하지 않습니다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">apply</code> : 원하는 상태를 적용, -f 옵션으로 파일과 함께 사용한다.</li>
  <li><code class="language-plaintext highlighter-rouge">get</code> : 리소스 목록을 보여준다.</li>
  <li><code class="language-plaintext highlighter-rouge">describe</code> : 리소스 목록을 자세히 보여준다.</li>
  <li><code class="language-plaintext highlighter-rouge">delete</code> : 리소스를 제거한다.</li>
  <li><code class="language-plaintext highlighter-rouge">logs</code> : 컨테이너 로그를 보여준다.</li>
  <li><code class="language-plaintext highlighter-rouge">exec</code> : 컨테이너에 명령을 전달한다. 컨테이너에 접근할 때 주로 사용한다.</li>
  <li><code class="language-plaintext highlighter-rouge">config</code> : kubectl 설정을 관리한다.</li>
</ul>

<h2 id="reference">Reference</h2>
<ul>
  <li><a href="https://www.inflearn.com/course/%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-%EA%B8%B0%EC%B4%88/dashboard">대세는 쿠버네티스(인프런)</a></li>
  <li><a href="https://subicura.com/k8s/">https://subicura.com/k8s/</a></li>
  <li><a href="https://samsungsds.com/kr/story/220222_kubernetes1.html">쿠버네티스 알아보기 1편</a></li>
  <li><a href="https://www.redhat.com/ko/topics/containers/what-is-kubernetes">쿠버네티스(Kubernetes) 개념, 사용방법, 차이점</a></li>
</ul>]]></content><author><name>goooose</name></author><category term="Ops" /><category term="k8s" /><summary type="html"><![CDATA[컨테이너 기반 배포 애플리케이션 배포 방식은 물리적인 컴퓨터에 OS와 APP을 설치하여 서비스하던 방식에서 가상화 배포 방식으로 변화했습니다. 가상화 방식은 가상머신 성능을 각각 관리하면서 자원 상황에 따라 조절할 수 있습니다. 그러나 가상머신마다 OS를 새로 설치해야 하고 용량 또한 큽니다.]]></summary></entry><entry><title type="html">AtCoder Beginner Contest 250</title><link href="http://localhost:4000/atcoder/abc250/" rel="alternate" type="text/html" title="AtCoder Beginner Contest 250" /><published>2022-05-10T00:00:00+09:00</published><updated>2022-05-10T00:00:00+09:00</updated><id>http://localhost:4000/atcoder/abc250</id><content type="html" xml:base="http://localhost:4000/atcoder/abc250/"><![CDATA[<h2 id="a-adjacent-squares">A. Adjacent Squares</h2>
<p>(H, W) 크기의 행렬이 주어졌을 때 위치 (R, C)에서 인접한 원소의 수를 출력하는 문제이다.<br />
H와 W가 1인 경우를 예외처리해주면 쉽게 풀 수 있다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
#define endl '\n'
#define fastio ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">pii</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="n">ll</span><span class="p">,</span><span class="n">ll</span><span class="o">&gt;</span> <span class="n">pll</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">INF</span><span class="o">=</span><span class="mf">1e9</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
 
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">fastio</span>
  <span class="c1">//freopen("input.txt","r",stdin);</span>
  <span class="kt">int</span> <span class="n">h</span><span class="p">,</span><span class="n">w</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">h</span><span class="o">&gt;&gt;</span><span class="n">w</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">r</span><span class="p">,</span><span class="n">c</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">r</span><span class="o">&gt;&gt;</span><span class="n">c</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">ans</span><span class="o">=</span><span class="mi">4</span><span class="p">;</span>
  <span class="k">if</span><span class="p">(</span><span class="n">h</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span> <span class="n">ans</span><span class="o">-=</span><span class="mi">2</span><span class="p">;</span>
  <span class="k">if</span><span class="p">(</span><span class="n">w</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span> <span class="n">ans</span><span class="o">-=</span><span class="mi">2</span><span class="p">;</span>
  <span class="k">if</span><span class="p">(</span><span class="n">h</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">r</span><span class="o">==</span><span class="mi">1</span> <span class="o">||</span> <span class="n">r</span><span class="o">==</span><span class="n">h</span><span class="p">))</span> <span class="n">ans</span><span class="o">--</span><span class="p">;</span>
  <span class="k">if</span><span class="p">(</span><span class="n">w</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">c</span><span class="o">==</span><span class="mi">1</span> <span class="o">||</span> <span class="n">c</span><span class="o">==</span><span class="n">w</span><span class="p">))</span> <span class="n">ans</span><span class="o">--</span><span class="p">;</span>
  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">ans</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="b-enlarged-checker-board">B. Enlarged Checker Board</h2>
<p>B번 ‘.’출력하고 B번 ‘#’출력하면서 전체 길이 $N \times B$를 $N \times A$번 출력하면 된다.<br />
단, A번 마다 먼저 출력하는 ‘.’와 ‘#’의 순서가 바뀐다.<br />
테스트케이스를 보면 쉽게 이해할 수 있다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
#define endl '\n'
#define fastio ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">pii</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="n">ll</span><span class="p">,</span><span class="n">ll</span><span class="o">&gt;</span> <span class="n">pll</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">INF</span><span class="o">=</span><span class="mf">1e9</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">foo</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flag</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">bool</span> <span class="n">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">flag</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">*</span><span class="n">b</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">%</span><span class="n">b</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="n">f</span><span class="o">^=</span><span class="mi">1</span><span class="p">;</span>
      <span class="k">if</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"."</span><span class="p">;</span>
      <span class="k">else</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"#"</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">else</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">*</span><span class="n">b</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">%</span><span class="n">b</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="n">f</span><span class="o">^=</span><span class="mi">1</span><span class="p">;</span>
      <span class="k">if</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"#"</span><span class="p">;</span>
      <span class="k">else</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"."</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">fastio</span>
  <span class="c1">//freopen("input.txt","r",stdin);</span>
  <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="o">&gt;&gt;</span><span class="n">a</span><span class="o">&gt;&gt;</span><span class="n">b</span><span class="p">;</span>
  <span class="kt">bool</span> <span class="n">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">*</span><span class="n">a</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">%</span><span class="n">a</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="n">f</span><span class="o">^=</span><span class="mi">1</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">f</span><span class="p">)</span> <span class="n">foo</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="k">else</span> <span class="n">foo</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="c-adjacent-swaps">C. Adjacent Swaps</h2>
<p>$2 ≤ N ≤ 2 \times 10^5$ 범위를 가진 N이 주어졌을 때, 1부터 N까지 적혀있는 공이    일렬로 정렬되어 있다.<br />
$x_i$인 쿼리가 입력될 때 해당 숫자가 적혀있는 공의 위치와 오른쪽에 있는 공의 위치를 교환한다. 가장 오른쪽에 있는 공의 경우 왼쪽 공과 바꿔준다.<br />
$1 ≤ Q ≤ 2 \times 10^5$ 인 쿼리가 들어오면서 시간 복잡도 $O(Q)$에 문제를 해결해야 한다.<br />
숫자가 적혀있는 공의 위치를 저장하는 배열(v2p)과 어떤 위치에 있는 공의 번호를 저장하는 배열(p2v)을 두어 $O(1)$의 시간복잡도로 두 공의 위치를 찾을 수 있다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
#define endl '\n'
#define fastio ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">pii</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="n">ll</span><span class="p">,</span><span class="n">ll</span><span class="o">&gt;</span> <span class="n">pll</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">INF</span><span class="o">=</span><span class="mf">1e9</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">fastio</span>
  <span class="c1">//freopen("input.txt","r",stdin);</span>
  <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">q</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="o">&gt;&gt;</span><span class="n">q</span><span class="p">;</span>
  <span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v2p</span><span class="p">,</span><span class="n">p2v</span><span class="p">;</span> <span class="c1">// idx-&gt;lo, lo-&gt;idx</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">v2p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">i</span><span class="p">,</span> <span class="n">p2v</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
  <span class="k">while</span><span class="p">(</span><span class="n">q</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">x</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">v2p</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">==</span><span class="n">n</span><span class="p">)</span> <span class="n">y</span><span class="o">=</span><span class="n">p2v</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
    <span class="k">else</span> <span class="n">y</span><span class="o">=</span><span class="n">p2v</span><span class="p">[</span><span class="n">v2p</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
    <span class="n">swap</span><span class="p">(</span><span class="n">p2v</span><span class="p">[</span><span class="n">v2p</span><span class="p">[</span><span class="n">x</span><span class="p">]],</span><span class="n">p2v</span><span class="p">[</span><span class="n">v2p</span><span class="p">[</span><span class="n">y</span><span class="p">]]);</span>
    <span class="n">swap</span><span class="p">(</span><span class="n">v2p</span><span class="p">[</span><span class="n">x</span><span class="p">],</span><span class="n">v2p</span><span class="p">[</span><span class="n">y</span><span class="p">]);</span>
  <span class="p">}</span>
  <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">:</span> <span class="n">p2v</span><span class="p">)</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">it</span><span class="p">.</span><span class="n">second</span><span class="o">&lt;&lt;</span><span class="sc">' '</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="d-250-like-number">D. 250-like Number</h2>
<p>$1 ≤ N ≤ 10^{18}$인 $N$이 주어졌을 때 아래 조건을 만족하는 $k$의 개수를 출력하는 문제이다.</p>
<ul>
  <li>$k = p \times q^3$, ($p &lt; q$ 를 만족하는 소수 $p$, $q$)</li>
  <li>$k ≤ N$ 조건에서 $p \times q^3 ≤ N \rightarrow q^3 ≤ N/p$을 알 수 있다.</li>
</ul>

<p>따라서, $p^3 &lt; X ≤ N/p$인 $X$의 개수를 upperbound로 세어주면 된다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
#define endl '\n'
#define fastio ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">pii</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="n">ll</span><span class="p">,</span><span class="n">ll</span><span class="o">&gt;</span> <span class="n">pll</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">INF</span><span class="o">=</span><span class="mf">1e9</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">fastio</span>
  <span class="c1">//freopen("input.txt","r",stdin);</span>
  <span class="n">ll</span> <span class="n">n</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
  <span class="c1">// k&lt;=n -&gt; p * q^3 &lt;= n -&gt; q^3 &lt;= (n/p) -&gt; upperbound?</span>
  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">temp</span><span class="p">(</span><span class="mf">1e6</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
  <span class="n">vector</span><span class="o">&lt;</span><span class="n">ll</span><span class="o">&gt;</span> <span class="n">mul</span><span class="p">;</span>
  <span class="n">set</span><span class="o">&lt;</span><span class="n">ll</span><span class="o">&gt;</span> <span class="n">prime</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="n">ll</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="mf">1e6</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">temp</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
      <span class="n">prime</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
      <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">*</span><span class="n">i</span><span class="o">*</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">)</span> <span class="n">mul</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="o">*</span><span class="n">i</span><span class="o">*</span><span class="n">i</span><span class="p">);</span>
      <span class="k">for</span><span class="p">(</span><span class="n">ll</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">i</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="mf">1e6</span><span class="p">;</span><span class="n">j</span><span class="o">+=</span><span class="n">i</span><span class="p">)</span> <span class="n">temp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="n">sort</span><span class="p">(</span><span class="n">mul</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">mul</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
  <span class="n">ll</span> <span class="n">ans</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">i</span> <span class="o">:</span> <span class="n">prime</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">&gt;=</span><span class="n">n</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
      <span class="n">ll</span> <span class="n">lim</span><span class="o">=</span><span class="n">n</span><span class="o">/</span><span class="n">i</span><span class="p">;</span>
      <span class="n">ll</span> <span class="n">uidx</span><span class="o">=</span><span class="n">upper_bound</span><span class="p">(</span><span class="n">mul</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">mul</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span><span class="n">lim</span><span class="p">)</span><span class="o">-</span><span class="n">mul</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
      <span class="n">ll</span> <span class="n">lidx</span><span class="o">=</span><span class="n">upper_bound</span><span class="p">(</span><span class="n">mul</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">mul</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span><span class="n">i</span><span class="o">*</span><span class="n">i</span><span class="o">*</span><span class="n">i</span><span class="p">)</span><span class="o">-</span><span class="n">mul</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
      <span class="k">if</span><span class="p">(</span><span class="n">uidx</span><span class="o">&gt;</span><span class="n">lidx</span><span class="p">)</span> <span class="n">ans</span><span class="o">+=</span><span class="n">uidx</span><span class="o">-</span><span class="n">lidx</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">ans</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>goooose</name></author><category term="AtCoder" /><category term="ABC" /><summary type="html"><![CDATA[A. Adjacent Squares (H, W) 크기의 행렬이 주어졌을 때 위치 (R, C)에서 인접한 원소의 수를 출력하는 문제이다. H와 W가 1인 경우를 예외처리해주면 쉽게 풀 수 있다.]]></summary></entry><entry><title type="html">airflow 체험기_최종</title><link href="http://localhost:4000/airflow/airflow-final/" rel="alternate" type="text/html" title="airflow 체험기_최종" /><published>2022-01-11T00:00:00+09:00</published><updated>2022-01-11T00:00:00+09:00</updated><id>http://localhost:4000/airflow/airflow-final</id><content type="html" xml:base="http://localhost:4000/airflow/airflow-final/"><![CDATA[<blockquote>
  <p>이전 글에서 SequentialExecutor에서 CeleryExecutor로 변경하기 위해 삽질한 경험글입니다.</p>
</blockquote>

<h2 id="celeryexecutor">CeleryExecutor</h2>
<p>Celery는 Postgresql과 Mysql만 db로 사용하고 있어서 기존 sqlite를 postgresql로 바꾸는 작업을 진행했습니다. Mysql은 에러가 자주나서 Postgresql을 선택했습니다.<br />
먼저, <code class="language-plaintext highlighter-rouge">airflow db init</code>을 하게 되면 <code class="language-plaintext highlighter-rouge">AIRFLOW_HOME</code>에 <code class="language-plaintext highlighter-rouge">airflow.cfg</code>라는 설정 파일이 생성됩니다. 바꿔야 하는 설정은 다음과 같습니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># port는 모두 기본포트를 사용하고 있어서 명시해줄 필요가 없었습니다.
</span><span class="n">executor</span> <span class="o">=</span> <span class="n">CeleryExecutor</span>
<span class="n">sql_alchemy_conn</span> <span class="o">=</span> <span class="n">postgresql</span><span class="o">+</span><span class="n">psycopg2</span><span class="p">:</span><span class="o">//</span><span class="nb">id</span><span class="p">:</span><span class="n">password</span><span class="o">@</span><span class="n">addr</span><span class="o">/</span><span class="n">dbname</span>
<span class="n">broker_url</span> <span class="o">=</span> <span class="n">amqp</span><span class="p">:</span><span class="o">//</span><span class="nb">id</span><span class="p">:</span><span class="n">password</span><span class="o">@</span><span class="n">addr</span><span class="o">/</span><span class="n">mqname</span>
<span class="n">result_backend</span> <span class="o">=</span> <span class="n">db</span><span class="o">+</span><span class="n">postgresql</span><span class="p">:</span><span class="o">//</span><span class="nb">id</span><span class="p">:</span><span class="n">password</span><span class="o">@</span><span class="n">addr</span><span class="o">/</span><span class="n">dbname</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">broker_url</code>에는 보통 메시지 큐를 삽입하는데 RabbitMQ를 사용하기로 했습니다. 보통 Redis는 캐시, RabbitMQ는 메시지 큐로 사용한다고 합니다.</p>

<p>그렇다면, 도커를 추가로 올려야 할 것은 RabbitMQ, Postgresql입니다.</p>

<h2 id="rabbitmq-postgresql">RabbitMQ, Postgresql</h2>
<p>RabbitMQ와 Postgresql은 Docker Hub에 이미지파일이 있어서 latest버전으로 pull했습니다.</p>

<h3 id="rabbitmq-설정">RabbitMQ 설정</h3>
<p>RabbitMQ는 도커로 실행하면 자동으로 서버가 실행되도록 작성되어 있습니다. (CMD [“rabbitmq-server”])<br />
그러나, 여기서 airflow라는 유저와 airflow라는 가상호스트를 추가해야 합니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># entrypoint.sh
</span><span class="n">rabbitmqctl</span> <span class="n">add_user</span> <span class="n">airflow</span> <span class="n">airflow</span>
<span class="n">rabbitmqctl</span> <span class="n">add_vhost</span> <span class="n">airflow</span>
<span class="n">rabbitmqctl</span> <span class="n">set_user_tags</span> <span class="n">airflow</span> <span class="n">airflow</span>
<span class="n">rabbitmqctl</span> <span class="n">set_permissions</span> <span class="o">-</span><span class="n">p</span> <span class="n">airflow</span> <span class="n">airflow</span> <span class="s">".*"</span> <span class="s">".*"</span> <span class="s">".*"</span>
</code></pre></div></div>
<p>dockerfile에서 CMD로 실행시켜버리면 rabbitmq 이미지의 CMD 명령어가 실행되지 않고 위의 명령어들이 실행되면서 <strong>rabbitmq 서버를 찾을 수 없다</strong>는 에러를 볼 수 있습니다.<br />
어쩔 수 없이 쉘 스크립트로 만들어서 컨테이너에서 쉘을 실행시키는 방법으로 해결했습니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># dockerfile
</span><span class="n">FROM</span> <span class="n">rabbitmq</span><span class="p">:</span><span class="n">latest</span>

<span class="n">ADD</span> <span class="p">.</span><span class="o">/</span><span class="n">entrypoint</span><span class="p">.</span><span class="n">sh</span>
<span class="n">RUN</span> <span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">entrypoint</span><span class="p">.</span><span class="n">sh</span>
</code></pre></div></div>

<h3 id="postgresql">Postgresql</h3>
<p>Postgresql은 미리 데이터베이스를 만들어둬야 합니다. 그래서 다음과 같은 sql 쿼리를 작성해서 컨테이너에서 실행할 수 있도록 작성했습니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># entrypoint.sql
</span><span class="n">CREATE</span> <span class="n">DATABASE</span> <span class="n">airflow</span><span class="p">;</span>
<span class="n">CREATE</span> <span class="n">USER</span> <span class="n">airflow</span> <span class="n">WITH</span> <span class="n">PASSWORD</span> <span class="s">'1234'</span> <span class="n">SUPERUSER</span><span class="p">;</span>
</code></pre></div></div>

<p>dockerfile 또한 entrypoint.sql을 실행할 수 있도록 권한을 변경해주고 postgres를 실행할 수 있게 했습니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># dockerfile
</span><span class="n">FROM</span> <span class="n">postgres</span><span class="p">:</span><span class="n">latest</span>

<span class="n">ADD</span> <span class="p">.</span><span class="o">/</span><span class="n">entrypoint</span><span class="p">.</span><span class="n">sql</span> <span class="p">.</span>
<span class="n">CMD</span> <span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">entrypoint</span><span class="p">.</span><span class="n">sql</span> <span class="o">&amp;&amp;</span> \
    <span class="n">su</span> <span class="n">postgres</span>
</code></pre></div></div>
<p>이후에 컨테이너에서 <code class="language-plaintext highlighter-rouge">psql -U postgres -f entrypoint.sql</code>로 작성한 sql 쿼리를 실행할 수 있습니다.
쉘 스크립트 내에서 sql을 실행시킬 수 있는 방법이 있지만 아직 어려워서 사용하지 못했습니다.</p>

<h2 id="airflow">airflow</h2>
<p>위의 CeleryExecutor에서 바꿔야 할 설정파일들을 자동으로 적용되게 하고 싶었습니다. 스크립트에서 설정파일을 바꿀 수 있는 명렁어가 있는지 찾아보다가 <code class="language-plaintext highlighter-rouge">sed</code>를 찾게 되어 바로 적용했습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/bin/bash
</span><span class="n">cp</span> <span class="o">/</span><span class="n">redis</span><span class="o">/</span><span class="n">mydags</span><span class="p">.</span><span class="n">py</span> <span class="o">/</span><span class="n">dags</span>
<span class="n">cp</span> <span class="o">/</span><span class="n">redis</span><span class="o">/</span><span class="n">func</span><span class="p">.</span><span class="n">py</span> <span class="o">/</span><span class="n">dags</span>
<span class="n">cp</span> <span class="o">/</span><span class="n">redis</span><span class="o">/</span><span class="n">redisqueue</span><span class="p">.</span><span class="n">py</span> <span class="o">/</span><span class="n">dags</span>
<span class="n">cp</span> <span class="o">/</span><span class="n">redis</span><span class="o">/</span><span class="n">constant</span><span class="p">.</span><span class="n">py</span> <span class="o">/</span><span class="n">dags</span>

<span class="c1"># create airflow.cfg
</span><span class="n">airflow</span> <span class="n">db</span> <span class="n">init</span>

<span class="c1"># exampel=False, set celery worker
</span><span class="n">sed</span> <span class="o">-</span><span class="n">i</span> <span class="s">"s/load_examples = True/load_examples = False/g"</span> <span class="n">airflow</span><span class="p">.</span><span class="n">cfg</span>
<span class="n">sed</span> <span class="o">-</span><span class="n">i</span> <span class="s">"s/executor = SequentialExecutor/executor = CeleryExecutor/g"</span> <span class="n">airflow</span><span class="p">.</span><span class="n">cfg</span>
<span class="n">sed</span> <span class="o">-</span><span class="n">i</span> <span class="s">"s^sql_alchemy_conn = sqlite:///./airflow.db^sql_alchemy_conn = postgresql+psycopg2://postgres:1234@172.17.0.2/airflow^g"</span> <span class="n">airflow</span><span class="p">.</span><span class="n">cfg</span>
<span class="n">sed</span> <span class="o">-</span><span class="n">i</span> <span class="s">"s^broker_url = redis://redis:6379/0^broker_url = amqp://airflow:airflow@172.17.0.5/airflow^g"</span> <span class="n">airflow</span><span class="p">.</span><span class="n">cfg</span>
<span class="n">sed</span> <span class="o">-</span><span class="n">i</span> <span class="s">"s^result_backend = db+postgresql://postgres:airflow@postgres/airflow^result_backend = db+postgresql://postgres:1234@172.17.0.2:5432/airflow^g"</span> <span class="n">airflow</span><span class="p">.</span><span class="n">cfg</span>

<span class="c1"># create account
</span><span class="n">airflow</span> <span class="n">users</span> <span class="n">create</span> <span class="o">--</span><span class="n">username</span> <span class="n">admin</span> <span class="o">--</span><span class="n">password</span> <span class="mi">1234</span> <span class="o">--</span><span class="n">firstname</span> <span class="n">a</span> <span class="o">--</span><span class="n">lastname</span> <span class="n">b</span> <span class="o">--</span><span class="n">role</span> <span class="n">Admin</span> <span class="o">--</span><span class="n">email</span> <span class="n">smk6221</span><span class="o">@</span><span class="n">naver</span><span class="p">.</span><span class="n">com</span>

<span class="c1"># run airflow
</span><span class="n">airflow</span> <span class="n">celery</span> <span class="n">worker</span> <span class="o">-</span><span class="n">D</span>
<span class="n">airflow</span> <span class="n">celery</span> <span class="n">flower</span> <span class="o">-</span><span class="n">D</span>
<span class="n">airflow</span> <span class="n">scheduler</span> <span class="o">-</span><span class="n">D</span>
<span class="n">airflow</span> <span class="n">webserver</span> <span class="o">-</span><span class="n">p</span> <span class="mi">8080</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">cp</code>명령어로 file sharing으로 로컬에서 작성한 파일들을 컨테이너로 옮기는 과정입니다.<br />
이후에 db 초기화를 진행하고 설정파일을 <code class="language-plaintext highlighter-rouge">sed</code>명렁어로 바꿔줍니다. 이때 주소는 바뀔 수 있어서 airflow 컨테이너를 가장 마지막에 올렸습니다.<br />
로그인할 계정을 만들어주고 celery, scheduler, server를 차례대로 실행시켜 줍니다. 웹서버를 제외한 나머지를 background로 돌리고 웹서버만 foreground로 돌리게했습니다.</p>

<h3 id="dag">DAG</h3>
<p>다음, mydags.py 내용을 수정했습니다. sqlite의 테이블이 있는지 확인하고 없으면 생성하는 태스크를 할 수 있도록 함수 추가와 오퍼레이터를 추가했습니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># func.py
</span><span class="k">def</span> <span class="nf">create_table</span><span class="p">():</span>
    <span class="n">con</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="p">.</span><span class="n">connect</span><span class="p">(</span><span class="s">'./dags/sqlite.db'</span><span class="p">)</span>
    <span class="n">con</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="s">'create table if not exists logging (time, level, id)'</span><span class="p">)</span>
    <span class="n">con</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># mydags.py
</span><span class="n">t2</span> <span class="o">=</span> <span class="n">PythonOperator</span><span class="p">(</span>
    <span class="n">task_id</span><span class="o">=</span><span class="s">'if_exists_table'</span><span class="p">,</span>
    <span class="n">python_callable</span><span class="o">=</span><span class="n">create_table</span><span class="p">,</span>
    <span class="n">depends_on_past</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">owner</span><span class="o">=</span><span class="s">'gooose'</span><span class="p">,</span>
    <span class="n">retries</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>
    <span class="n">retry_delay</span><span class="o">=</span><span class="n">timedelta</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="결과">결과</h2>
<p>최종 그래프는 다음과 같습니다. 
<img src="https://drive.google.com/uc?export=view&amp;id=1Qtqbduiw72XpNNSeQeH7pGWufVc-VT1-" alt="" /><br />
collector들이 연두색 테두리를 가지고 있는데 RUNNING되고 있는 것을 나타내고 있으며 병렬처리되고 있음을 알 수 있습니다.<br />
추가적으로 collector들이 db에 접근하기 때문에 table lock이 필요한가?에 대해서 찾아봤는데 sqlite는 트랜잭션을 실행할 때 테이블을 잠가버리기 때문에 따로 구현할 필요는 없다고 합니다.</p>

<p><img src="https://drive.google.com/uc?export=view&amp;id=1dtOKXsliL3tkOZaqZ9WOmgbz05_8hXIP" alt="" /><br />
collector 하나의 log를 살펴본 이미지인데 에러가 아닌(check=0) 로그들이 문제없이 db로 들어가고 있습니다. 지금 출력이 2개씩 되고 있는것은 코드 작성에서 print가 두 번 실행되고 있기 때문입니다.</p>

<h2 id="회고">회고</h2>
<h3 id="도커">도커</h3>
<p>5개의 컨테이너를 하나씩 돌려보면서 docker-compose를 사용하는 이유를 알 수 있었습니다. 나중에 한 번 연습해보려고 합니다.<br />
그리고, 도커를 실행하면 바로 exit(0)되는 경우가 자주 있었는데 이건 도커에 대한 이해를 제대로 하지 못해서였습니다. 도커는 vmware나 virtual box가 아닌 가상 컨테이너에서 명령을 실행하는 도구로 인식해야 함을 알게 되었습니다.
그래서 명령을 다 실행하게되면 자동으로 도커가 stop되는 것이고 서버처럼 계속 돌아가고 있게 하려면 서버를 foreground로 구동해야 합니다. 컨테이너를 돌릴 때 while문으로 메시지(예를들면, “still alive…“)를 계속 출력하게 하는 방법도 있다고 합니다.<br />
마지막으로 RabbitMQ나 Postgres를 사용해보면서 dockerfile 마지막에 CMD로 쉘 스크립트를 실행시키려고 했지만 서버가 실행되지 않으면서 스크립트 명령어가 제대로 작동하지 않았습니다. 이유는 from으로 들어오는 이미지의 도커파일 마지막에 CMD로 서버를 실행시키는 명령이 있고 저의 dockerfile에서 CMD를 사용해버리면서 대체되어 버리기 때문입니다. 이것을 해결하는 방법은 아직 찾지 못했습니다.</p>

<h3 id="쉘-스크립트">쉘 스크립트</h3>
<p>부캠때도 많이 사용하지 않은 쉘 스크립트를 이번에 많이 사용하게 되었습니다. 아직 초보 수준이고 if문이나 다른 문법들을 공부할 필요를 느낄 수 있었습니다.<br />
특히 <code class="language-plaintext highlighter-rouge">sed</code>의 경우 모두 블로그에서 치환자(?)를 <code class="language-plaintext highlighter-rouge">/</code>로 많이 사용해서 치환할 문자열이 주소인 경우 너무 난감했습니다. 하나의 블로그에서 다른 치환자가 가능하다는 것을 알려줘서 주소가 들어간 경우 <code class="language-plaintext highlighter-rouge">^</code>로 사용할 수 있었습니다.</p>

<h3 id="에어플로우">에어플로우</h3>
<p>먼저, <code class="language-plaintext highlighter-rouge">bashOperator</code>의 경우 임시 폴더에서 실행되는 것을 알 수 있었습니다. 맥 기준 /var/private/…/…(확실하진 않지만 비슷한 경로입니다)와 같은 폴더에서 실행되어 환경변수 <code class="language-plaintext highlighter-rouge">AIRFLOW_HOME</code> 설정이 정말 중요하다는 것을 알 수 있었습니다. 도커파일에는 다른 것들이 들어가지 않아서 <code class="language-plaintext highlighter-rouge">.</code>으로 설정했지만 디렉토리 구분이 필요한 경우 환경변수 세팅이 중요해보입니다.<br />
다음, cron 표기인데 (초, 분, 시간, 일, 월, 년) 순으로 되어 있는 것을 몰라서 0/1 * * * *로 했다가 1초마다 갱신되는 지옥을 보았습니다. 나중에 수정해서 5분마다 갱신되도록 했습니다.</p>

<h2 id="reference">Reference</h2>
<ul>
  <li><a href="https://www.slideshare.net/YoungHeonKim1/airflow-workflow">https://www.slideshare.net/YoungHeonKim1/airflow-workflow</a></li>
  <li><a href="http://sanghun.xyz/2017/12/airflow-4.-celeryexecutor-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/">http://sanghun.xyz/2017/12/airflow-4.-celeryexecutor-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</a></li>
  <li><a href="https://stackoverflow.com/questions/36822515/configuring-airflow-to-work-with-celeryexecutor">https://stackoverflow.com/questions/36822515/configuring-airflow-to-work-with-celeryexecutor</a></li>
  <li><a href="http://daplus.net/postgresql-%EC%99%B8%EB%B6%80%EC%97%90%EC%84%9C-%EB%8F%84%EC%BB%A4-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%9D%98-postgresql%EC%97%90-%EC%97%B0%EA%B2%B0/">http://daplus.net/postgresql-%EC%99%B8%EB%B6%80%EC%97%90%EC%84%9C-%EB%8F%84%EC%BB%A4-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%9D%98-postgresql%EC%97%90-%EC%97%B0%EA%B2%B0/</a></li>
  <li><a href="https://forums.docker.com/t/unable-to-run-psql-inside-a-postgres-container/90623/7">https://forums.docker.com/t/unable-to-run-psql-inside-a-postgres-container/90623/7</a></li>
</ul>]]></content><author><name>goooose</name></author><category term="airflow" /><category term="docker" /><category term="Ops" /><summary type="html"><![CDATA[이전 글에서 SequentialExecutor에서 CeleryExecutor로 변경하기 위해 삽질한 경험글입니다.]]></summary></entry><entry><title type="html">airflow 체험기</title><link href="http://localhost:4000/airflow/airflow/" rel="alternate" type="text/html" title="airflow 체험기" /><published>2022-01-09T00:00:00+09:00</published><updated>2022-01-09T00:00:00+09:00</updated><id>http://localhost:4000/airflow/airflow</id><content type="html" xml:base="http://localhost:4000/airflow/airflow/"><![CDATA[<blockquote>
  <p>부캠 때 에러로 사용못한 airflow를 이제서야 체험해본 것을 정리한 글입니다. (무지성 주의)</p>
</blockquote>

<h2 id="airflow-시작">airflow 시작</h2>
<p>데이터 엔지니어링 도구인 airflow를 로컬에 설치한 후 몇가지를 살펴보았는데 airflow는 데이터를 관리하는 것이 아닌 함수 단위나 스크립트 단위로 실행시켜주는 도구라는 것을 깨닫게 되었습니다.<br />
그렇다면 데이터를 생성해서 스케줄링을 돌리자!라는 생각이 들어 재밌어보여서 바로 실행에 옮겼습니다. 다시 어떤 데이터를 생성해야 하나?라는 생각에 기업이라면 로그들을 사용하므로 저도 간단한 로그를 생성해서 db에 넣는 것 까지 해볼 생각이었습니다.</p>

<h3 id="데이터-형태">데이터 형태</h3>
<p>실제 로그들을 보면 많은 양의 정보가 들어있지만 간단하게 생성할 생각이므로 (타임스탬프, level, 메시지, id, 오류 check)로 구성했습니다.</p>

<p><code class="language-plaintext highlighter-rouge">{"timestamp": 1641699997.0480268, "level": "ERROR", "id": 23, "message": "An unexpected error occurred.", "check": 0}</code></p>

<p>check항목은 10%의 확률로 오류인경우 check에 1이 들어가도록 설정했습니다. 실제로는 좀 더 복잡한 데이터 검증을 하겠지만 여기서는 간단하게 에러인지 아닌지 확인하는 정도만 확인하도록 구성했습니다.</p>

<h2 id="데이터-생성">데이터 생성</h2>
<p>각종 서버에서 생성된 로그들은 한 곳에 모아지거나 어느정도 분산된 데이터베이스로 전달되는데 여기는 메시지 큐(Message Queue, MQ)를 사용하고 싶었습니다. 로그들이 메시지 큐로 들어가 에어플로우 worker들이 큐에서 하나씩 빼와서 에러 체크한 후 db에 넣어주는 것을 생각했습니다.<br />
메시지 큐는 RabbitMQ, Redis 등이 있는데 어디서 들어본 Redis를 사용해서 큐를 구축했습니다. <a href="https://blog.naver.com/wideeyed/221370229153">링크</a>에서 코드들을 가져와 코드들을 다시 재구성했습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># producer.py
</span><span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">from</span> <span class="nn">redisqueue</span> <span class="kn">import</span> <span class="n">RedisQueue</span>
<span class="kn">from</span> <span class="nn">constant</span> <span class="kn">import</span> <span class="n">REDIS_HOST</span><span class="p">,</span> <span class="n">REDIS_PORT</span>

<span class="n">q</span> <span class="o">=</span> <span class="n">RedisQueue</span><span class="p">(</span><span class="s">'my-queue'</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="n">REDIS_HOST</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="n">REDIS_PORT</span><span class="p">,</span> <span class="n">db</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">level</span> <span class="o">=</span> <span class="p">[</span><span class="s">'INFO'</span><span class="p">,</span> <span class="s">'WARNING'</span><span class="p">,</span> <span class="s">'ERROR'</span><span class="p">]</span>
<span class="n">message</span> <span class="o">=</span> <span class="p">[</span><span class="s">'All passed.'</span><span class="p">,</span> <span class="s">'Incorrect access'</span><span class="p">,</span> <span class="s">'An unexpected error occurred.'</span><span class="p">]</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="c1"># message put
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">30</span><span class="p">):</span>
        <span class="n">cur_time</span> <span class="o">=</span> <span class="s">'{"timestamp":'</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">())</span> <span class="o">+</span> <span class="s">'}'</span>
        <span class="n">element</span>  <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">cur_time</span><span class="p">)</span>

        <span class="c1"># Add Your Own Data
</span>        <span class="n">ridx</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
        <span class="n">rndn</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">random</span><span class="p">()</span>
        <span class="n">element</span><span class="p">[</span><span class="s">'level'</span><span class="p">]</span> <span class="o">=</span> <span class="n">level</span><span class="p">[</span><span class="n">ridx</span><span class="p">]</span>
        <span class="n">element</span><span class="p">[</span><span class="s">'id'</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
        <span class="n">element</span><span class="p">[</span><span class="s">'message'</span><span class="p">]</span> <span class="o">=</span> <span class="n">message</span><span class="p">[</span><span class="n">ridx</span><span class="p">]</span>
        <span class="n">element</span><span class="p">[</span><span class="s">'check'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">rndn</span> <span class="o">&gt;</span> <span class="mf">0.1</span> <span class="k">else</span> <span class="mi">1</span>

        <span class="n">element_str</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">element_str</span><span class="p">)</span>
        <span class="n">q</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">element_str</span><span class="p">)</span>
        <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    
</code></pre></div></div>
<p>먼저, <code class="language-plaintext highlighter-rouge">producer.py</code>는 로그를 생성하는 파일입니다. 랜덤으로 [‘INFO’, ‘WARNING’, ‘ERROR’]를 선택하게 하고 그에 맞는 메시지도 포함시키도록 했습니다. 에러는 위에서 말한대로 10%의 확률로 일어나고 json 포맷 형태로 큐에 들어가고 1초마다 생성하도록 구성했습니다.</p>

<h2 id="redis-세팅">Redis 세팅</h2>
<p>Redis를 사용하려면 Redis가 돌아가는 서버를 돌려야 하는데 참고한 블로그와 마찬가지로 도커를 이용하기로 했습니다. 이후에 airflow까지 도커로 돌릴 생각이었기 때문입니다. (사실 맥북 용량이 얼마 안남았습니다. 조만간 포맷해야…)
도커에서 이미지를 가져와야 하는데 저는 블로그와 똑같이 redis:latest 위에서 작업했습니다. dockerfile을 만들지는 않고 컨테이너 위에서 설치했습니다.</p>

<p>먼저, redis-server라는 이름의 컨테이너에서 6379번 포트를 열어서 redis 이미지를 실행시킵니다.
<code class="language-plaintext highlighter-rouge">docker run --name redis-server -p 6379:6379 -it redis:latest /bin/bash</code></p>

<p>redis 서버를 사용하려면 host 주소와 포트번호를 알아야 하는데 이를 위해 ifconfig를 설치할 것입니다.<br />
<code class="language-plaintext highlighter-rouge">apt-get update &amp;&amp; apt-get install net-tools &amp;&amp; ifconfig</code>
그러면 eth0에 172.17.0.x의 주소가 보이는데 이것을 기록해놓으면 됩니다.</p>

<ul>
  <li>나중에 알았는데 vsc에서 도커 익스텐션을 설치한 후 bridge에서 검사를 누르면 열러있는 도커들의 주소들을 알 수 있습니다.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">redis-server</code>실행하게 되면 redis 서버가 실행되면서 세팅은 끝나게 됩니다.</p>

<h3 id="redis-client-세팅">Redis-client 세팅</h3>
<p>이 컨테이너는 <code class="language-plaintext highlighter-rouge">producer.py</code>를 실행시켜 로그를 생성해 큐에 메시지를 넣는 컨테이너입니다. python 이미지 위에서 redis를 설치하면 끝납니다. 직접 실행시켜도 되고 watch 명령어로 주기적으로 실행시켜도 됩니다.</p>

<h2 id="airflow-세팅">Airflow 세팅</h2>
<p>airflow는 이전에 세팅한 경험이 있어서 비교적 쉽게 할 수 있었습니다. 이번에는 python 이미지 위에서 작업했습니다.<br />
<code class="language-plaintext highlighter-rouge">docker run --name airflow-server -p 8080:8080 -it python:3.7.0 /bin/bash</code><br />
저는 <code class="language-plaintext highlighter-rouge">-v</code>옵션을 통해서 file sharing을 활성화했습니다. 이 옵션을 선택하면 로컬에 있는 폴더에서 컨테이너 내부로 파일을 쉽게 옮길 수 있습니다. vsc로 코드를 작성하면 <code class="language-plaintext highlighter-rouge">cp</code>명령어로 업데이트까지 편하게 할 수 있습니다.</p>

<p>먼저, airflow는 airflow webserver와 airflow scheduler를 동시에 실행시켜야 합니다. 그래서 screen을 이용하기로 했습니다.
<code class="language-plaintext highlighter-rouge">apt-get update &amp;&amp; apt-get install screen</code></p>

<p><code class="language-plaintext highlighter-rouge">AIRFLOW_HOME</code>을 비롯해 DB 초기화, Admin 계정을 만들어 줍니다. 이제 screen으로 서버와 스케줄러를 돌려줍니다. 스크린에서 빠져나오는 키는 <code class="language-plaintext highlighter-rouge">ctrl+a+d</code>입니다.<br />
<code class="language-plaintext highlighter-rouge">screen -S airflow-scheduler</code><br />
<code class="language-plaintext highlighter-rouge">airflow scheduler</code><br />
<code class="language-plaintext highlighter-rouge">screen -S airflow-server</code><br />
<code class="language-plaintext highlighter-rouge">airflow webserver -p 8080</code></p>

<h2 id="dag작성">Dag작성</h2>
<p>airflow가 돌아가는 컨테이너에서 <code class="language-plaintext highlighter-rouge">AIRFLOW_HOME</code> 위치에서 <code class="language-plaintext highlighter-rouge">mkdir dags</code>로 dag를 넣어줄 디렉토리를 생성합니다.<br />
dag는 다음과 같이 작성합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># func.py
</span><span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">datetime</span>
<span class="kn">import</span> <span class="nn">sqlite3</span>
<span class="kn">from</span> <span class="nn">sqlite3.dbapi2</span> <span class="kn">import</span> <span class="n">Error</span>
<span class="kn">from</span> <span class="nn">redisqueue</span> <span class="kn">import</span> <span class="n">RedisQueue</span>
<span class="kn">from</span> <span class="nn">constant</span> <span class="kn">import</span> <span class="n">REDIS_HOST</span><span class="p">,</span> <span class="n">REDIS_PORT</span>

<span class="k">def</span> <span class="nf">consumer</span><span class="p">():</span>
    <span class="n">q</span> <span class="o">=</span> <span class="n">RedisQueue</span><span class="p">(</span><span class="s">'my-queue'</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="n">REDIS_HOST</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="n">REDIS_PORT</span><span class="p">,</span> <span class="n">db</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">isBlocking</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="k">while</span> <span class="n">msg</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">msg_json</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">msg_json</span><span class="p">[</span><span class="s">'check'</span><span class="p">]:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="k">with</span> <span class="n">sqlite3</span><span class="p">.</span><span class="n">connect</span><span class="p">(</span><span class="s">'sqltie.db'</span><span class="p">)</span> <span class="k">as</span> <span class="n">con</span><span class="p">:</span>
                    <span class="n">cur</span> <span class="o">=</span> <span class="n">con</span><span class="p">.</span><span class="n">cursor</span><span class="p">()</span>
                    <span class="n">_date</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="n">fromtimestamp</span><span class="p">(</span>
                        <span class="nb">int</span><span class="p">(</span><span class="n">msg_json</span><span class="p">[</span><span class="s">'timestamp'</span><span class="p">]))</span> \
                        <span class="p">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">'%Y-%m-%d %H:%M:%S'</span><span class="p">)</span>
                    <span class="n">cur</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span>
                        <span class="s">"INSERT INTO table </span><span class="se">\
</span><span class="s">                        (time, level, id) VALUES (?,?,?)"</span><span class="p">,</span>
                        <span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">_date</span><span class="p">),</span><span class="n">msg_json</span><span class="p">[</span><span class="s">'level'</span><span class="p">],</span><span class="n">msg_json</span><span class="p">[</span><span class="s">'id'</span><span class="p">]))</span>
            <span class="k">except</span> <span class="n">Error</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                <span class="n">con</span><span class="p">.</span><span class="n">rollback</span><span class="p">()</span>
                <span class="k">print</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>          
        <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>
<p>위의 코드에서 <code class="language-plaintext highlighter-rouge">isBlocking=True</code>로 두면 큐가 비어있을 때 무한정 대기한다는 뜻입니다. False로 두어서 큐가 비어있으면 태스크를 끝내도록 작성했습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># mydags.py
</span><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">timedelta</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">argv</span>

<span class="kn">from</span> <span class="nn">airflow</span> <span class="kn">import</span> <span class="n">DAG</span>
<span class="kn">from</span> <span class="nn">airflow.utils.dates</span> <span class="kn">import</span> <span class="n">days_ago</span>
<span class="kn">from</span> <span class="nn">airflow.operators.bash</span> <span class="kn">import</span> <span class="n">BashOperator</span>
<span class="kn">from</span> <span class="nn">airflow.operators.python</span> <span class="kn">import</span> <span class="n">PythonOperator</span>

<span class="kn">from</span> <span class="nn">func</span> <span class="kn">import</span> <span class="n">consumer</span>

<span class="k">with</span> <span class="n">DAG</span><span class="p">(</span>
    <span class="n">dag_id</span><span class="o">=</span><span class="s">'data_collector'</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="s">'My dag'</span><span class="p">,</span>
    <span class="n">start_date</span><span class="o">=</span><span class="n">days_ago</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">,</span>
    <span class="n">schedule_interval</span><span class="o">=</span><span class="s">"0 0/5 * * *"</span><span class="p">,</span> <span class="c1"># 5분간격
</span>    <span class="n">tags</span><span class="o">=</span><span class="p">[</span><span class="s">'my_dags'</span><span class="p">],</span>
    <span class="n">concurrency</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
<span class="p">)</span> <span class="k">as</span> <span class="n">dag</span><span class="p">:</span>

    <span class="n">t1</span> <span class="o">=</span> <span class="n">BashOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">'start_schedule'</span><span class="p">,</span>
        <span class="n">bash_command</span><span class="o">=</span><span class="s">'echo START DATA COLLECTOR'</span><span class="p">,</span>
        <span class="n">owner</span><span class="o">=</span><span class="s">'gooose'</span><span class="p">,</span>
        <span class="n">retries</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>
        <span class="n">retry_delay</span><span class="o">=</span><span class="n">timedelta</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
    <span class="p">)</span>

    <span class="n">t2</span> <span class="o">=</span> <span class="n">PythonOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">'collector_0'</span><span class="p">,</span>
        <span class="n">python_callable</span><span class="o">=</span><span class="n">consumer</span><span class="p">,</span>
        <span class="n">depends_on_past</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
        <span class="n">owner</span><span class="o">=</span><span class="s">'goooose'</span><span class="p">,</span>
        <span class="n">retries</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>
        <span class="n">retry_delay</span><span class="o">=</span><span class="n">timedelta</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
    <span class="p">)</span>

    <span class="n">t3</span> <span class="o">=</span> <span class="n">PythonOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">'collector_1'</span><span class="p">,</span>
        <span class="n">python_callable</span><span class="o">=</span><span class="n">consumer</span><span class="p">,</span>
        <span class="n">depends_on_past</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
        <span class="n">owner</span><span class="o">=</span><span class="s">'goooose'</span><span class="p">,</span>
        <span class="n">retries</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>
        <span class="n">retry_delay</span><span class="o">=</span><span class="n">timedelta</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
    <span class="p">)</span>

    <span class="n">t4</span> <span class="o">=</span> <span class="n">PythonOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">'collector_2'</span><span class="p">,</span>
        <span class="n">python_callable</span><span class="o">=</span><span class="n">consumer</span><span class="p">,</span>
        <span class="n">depends_on_past</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
        <span class="n">owner</span><span class="o">=</span><span class="s">'goose'</span><span class="p">,</span>
        <span class="n">retries</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>
        <span class="n">retry_delay</span><span class="o">=</span><span class="n">timedelta</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
    <span class="p">)</span>

    <span class="n">t5</span> <span class="o">=</span> <span class="n">BashOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">'end_schedule'</span><span class="p">,</span>
        <span class="n">bash_command</span><span class="o">=</span><span class="s">'echo END DATA COLLECTOR'</span><span class="p">,</span>
        <span class="n">owner</span><span class="o">=</span><span class="s">'gooose'</span><span class="p">,</span>
        <span class="n">retries</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>
        <span class="n">retry_delay</span><span class="o">=</span><span class="n">timedelta</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
    <span class="p">)</span>

    <span class="c1"># 태스크 순서 정의
</span>    <span class="n">t1</span><span class="o">&gt;&gt;</span><span class="p">[</span><span class="n">t2</span><span class="p">,</span> <span class="n">t3</span><span class="p">,</span> <span class="n">t4</span><span class="p">]</span><span class="o">&gt;&gt;</span><span class="n">t5</span>
</code></pre></div></div>

<h2 id="몰랐던-airflowcfg">몰랐던 airflow.cfg</h2>
<p>처음 생각은 consumer역할을 맡은 t2, t3, t4에서 큐에서 하나씩 로그를 빼낸 후 에러 검증 후 db에 넣는 것을 생각했습니다.</p>

<p>그러나, collector_0만 실행되고 나머지 collector는 큐에 대기하다가 실행이 끝났습니다.<br />
airflow의 병렬처리를 할 수 있는 방법에 대해 찾아보니 celery를 사용하는 것을 볼 수 있었습니다.</p>

<p>airflow 설정파일인 <code class="language-plaintext highlighter-rouge">airflow.cfg</code>를 보면 다음과 같은 항목이 보입니다.<br />
<code class="language-plaintext highlighter-rouge">executor = SequentialExecutor</code><br />
airflow의 초기 세팅은 SequentialExecutor이었고 collector_0만 실행되는 이유도 같은 것이었습니다.</p>

<p>그렇다면 celery만 사용하면 되는것이 아닌가?하는 의문이 생길 수 있는데 여기부터 좀 어려웠습니다.<br />
celery가 지원하는 db는 postgresql, mysql 정도이고 세팅하려면 새로 컨테이너를 올려야 한다는 판단을 했습니다.</p>

<h2 id="현재-위치">현재 위치</h2>
<p>mysql을 선택하고 컨테이너에 올렸는데 <code class="language-plaintext highlighter-rouge">Authentication plugin 'caching_sha2_password' cannot be loaded: dlopen(/usr/local/mysql/lib/plugin/caching_sha2_password.so, 2): image not found</code>이런 에러로 더이상 진행되지 못하고 있습니다.</p>

<p>해결방법인 <code class="language-plaintext highlighter-rouge">ALTER USER root@localhost IDENTIFIED WITH mysql_natvie_password by 'password'</code>까지 시도했지만 해결되지 않았습니다.</p>

<p>다른 DB인 postgresql로 바꾼 뒤에 다시 시도해보고 성공하면 다음 포스트에 후기를 남길 수 있을 것 같습니다.</p>]]></content><author><name>goooose</name></author><category term="airflow" /><category term="Ops" /><summary type="html"><![CDATA[부캠 때 에러로 사용못한 airflow를 이제서야 체험해본 것을 정리한 글입니다. (무지성 주의)]]></summary></entry><entry><title type="html">AtCoder Beginner Contest 233</title><link href="http://localhost:4000/atcoder/abc233/" rel="alternate" type="text/html" title="AtCoder Beginner Contest 233" /><published>2022-01-05T00:00:00+09:00</published><updated>2022-01-05T00:00:00+09:00</updated><id>http://localhost:4000/atcoder/abc233</id><content type="html" xml:base="http://localhost:4000/atcoder/abc233/"><![CDATA[<h2 id="a-10yen-stamp">A. 10yen Stamp</h2>
<p>10엔 스탬프를 모아서 현재 $X$에서 목표치 $Y$를 달성할 때까지 몇 번을 봉투에 넣어야 하는지 계산하는 문제이다.<br />
$X$가 $Y$보다 큰 경우 0을 출력해주는 예외처리만 해주면 된다.</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cstring&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cmath&gt;</span><span class="cp">
#define endl '\n'
#define fastio ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ull</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">pii</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="n">ll</span><span class="p">,</span> <span class="n">ll</span><span class="o">&gt;</span> <span class="n">pll</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">INF</span> <span class="o">=</span> <span class="mf">1e9</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">fastio</span>
  <span class="c1">//freopen("input.txt", "r", stdin);</span>
  <span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">a</span><span class="o">&gt;&gt;</span><span class="n">b</span><span class="p">;</span>
  <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="o">&gt;=</span><span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="mi">0</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">ceil</span><span class="p">(</span><span class="kt">double</span><span class="p">(</span><span class="n">b</span><span class="o">-</span><span class="n">a</span><span class="p">)</span><span class="o">/</span><span class="mi">10</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="b-a-reverse">B. A Reverse</h2>
<p>문자열 $S$에서 $L$번째부터 $R$번째까지 부분문자열을 뒤집어 출력하는 구현 문제이다.</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cstring&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
#define endl '\n'
#define fastio ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ull</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">pii</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="n">ll</span><span class="p">,</span> <span class="n">ll</span><span class="o">&gt;</span> <span class="n">pll</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">INF</span> <span class="o">=</span> <span class="mf">1e9</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">fastio</span>
  <span class="c1">//freopen("input.txt", "r", stdin);</span>
  <span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">a</span><span class="o">&gt;&gt;</span><span class="n">b</span><span class="p">;</span>
  <span class="n">string</span> <span class="n">s</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">s</span><span class="p">;</span>
  <span class="n">string</span> <span class="n">t</span><span class="o">=</span><span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">b</span><span class="o">-</span><span class="n">a</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
  <span class="n">reverse</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">t</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">t</span><span class="o">&lt;&lt;</span><span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="c-product">C. Product</h2>
<p>$i$번째 가방에 $L_i$개의 공이 있고 각 공은 $a_{ij}$의 숫자가 적혀있다.<br />
모든 가방에서 공을 하나씩 선택하고 각 공에 적힌 수의 곱이 $X$인 경우의 수를 계산하는 문제이다.<br />
중요한 정보로 $\sum_{i}^N L_i = 10^5$ 이라는 조건이 문제에 있다. 그래서 dp처럼 접근하는 것도 가능할 것 같아서 다음과 같이 접근했다.<br />
map을 사용해서 위에서부터 어떤 공을 선택했을 때 이전 값에 나눈 몫을 다음 값으로 저장하는 방법을 사용했다.<br />
<code class="language-plaintext highlighter-rouge">current</code>는 위에서 선택한 수를 나누어 현재 필요한 수를 의미하고 <code class="language-plaintext highlighter-rouge">ball</code>은 $i$번째 가방에서 꺼낸 어떤 공에 적힌 수를 의미한다.<br />
그렇다면 <code class="language-plaintext highlighter-rouge">current</code>를 <code class="language-plaintext highlighter-rouge">ball</code>로 나누어 떨어질 때 <code class="language-plaintext highlighter-rouge">m[i][current/ball] += m[i-1][current]</code>와 같은 식을 사용할 수 있게된다.<br />
나중에 editorial을 보니까 dfs로 접근하여 문제를 해결하고 있다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cstring&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;map&gt;</span><span class="cp">
#define endl '\n'
#define fastio ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ull</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">pii</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="n">ll</span><span class="p">,</span> <span class="n">ll</span><span class="o">&gt;</span> <span class="n">pll</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">INF</span> <span class="o">=</span> <span class="mf">1e9</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">fastio</span>
  <span class="c1">//freopen("input.txt", "r", stdin);</span>
  <span class="n">ll</span> <span class="n">n</span><span class="p">,</span><span class="n">x</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="o">&gt;&gt;</span><span class="n">x</span><span class="p">;</span>
  <span class="n">vector</span><span class="o">&lt;</span><span class="n">ll</span><span class="o">&gt;</span> <span class="n">bag</span><span class="p">[</span><span class="mi">100001</span><span class="p">];</span>
  <span class="k">for</span><span class="p">(</span><span class="n">ll</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">ll</span> <span class="n">l</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">l</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="n">l</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">ll</span> <span class="n">a</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">a</span><span class="p">;</span>
      <span class="n">bag</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="n">map</span><span class="o">&lt;</span><span class="n">ll</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">m</span><span class="p">[</span><span class="mi">100001</span><span class="p">];</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">bag</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="o">%</span><span class="n">bag</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">x</span><span class="o">/</span><span class="n">bag</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">]]</span><span class="o">++</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">:</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">bag</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">();</span><span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">first</span><span class="o">&gt;=</span><span class="n">bag</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">it</span><span class="p">.</span><span class="n">first</span><span class="o">%</span><span class="n">bag</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">it</span><span class="p">.</span><span class="n">first</span><span class="o">/</span><span class="n">bag</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]]</span><span class="o">+=</span><span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">it</span><span class="p">.</span><span class="n">first</span><span class="p">];</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">m</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="d-count-interval">D. Count Interval</h2>
<p>어떤 수열 $A$가 주어졌을 때, 연속된 구간의 부분합이 $K$가 되는 경우를 모두 계산하는 문제이다.<br />
수열의 길이가 $2 \times 10^5$이므로 $O(N)$에 문제를 해결해야 한다.<br />
어떤 구간합을 구하기 위해서는 $K = prefix[i] - prefix[j]$ 를 찾아야 한다. 이걸 다시 바꾸면 $prefix[i]$와 $prefix[i] - K$가 있는지 확인하면 된다.<br />
보통 누적합을 사용해서 문제를 풀 수 있는데 $O(1)$의 접근을 위해 <code class="language-plaintext highlighter-rouge">map</code>을 사용하려고 한다.<br />
2중 for문으로 $1≤i≤N, 1≤j≤i$를 찾으려고 하면 <code class="language-plaintext highlighter-rouge">TLE</code>이므로 <code class="language-plaintext highlighter-rouge">map</code>을 사용하여 2중 for문 결과와 같게 할 수 있다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cstring&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;map&gt;</span><span class="cp">
#define endl '\n'
#define fastio ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ull</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">pii</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="n">ll</span><span class="p">,</span> <span class="n">ll</span><span class="o">&gt;</span> <span class="n">pll</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">INF</span> <span class="o">=</span> <span class="mf">1e9</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">fastio</span>
  <span class="c1">//freopen("input.txt", "r", stdin);</span>
  <span class="n">ll</span> <span class="n">n</span><span class="p">,</span><span class="n">k</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="o">&gt;&gt;</span><span class="n">k</span><span class="p">;</span>
  <span class="n">vector</span><span class="o">&lt;</span><span class="n">ll</span><span class="o">&gt;</span> <span class="n">a</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="n">prefix</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="n">it</span> <span class="o">:</span> <span class="n">a</span><span class="p">)</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">it</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">prefix</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">prefix</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
  <span class="n">map</span><span class="o">&lt;</span><span class="n">ll</span><span class="p">,</span><span class="n">ll</span><span class="o">&gt;</span> <span class="n">m</span><span class="p">;</span>
  <span class="n">ll</span> <span class="n">ans</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="n">ll</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">m</span><span class="p">[</span><span class="n">prefix</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span><span class="o">++</span><span class="p">;</span>
    <span class="n">ans</span><span class="o">+=</span><span class="n">m</span><span class="p">[</span><span class="n">prefix</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="n">k</span><span class="p">];</span>
  <span class="p">}</span>
  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">ans</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>goooose</name></author><category term="AtCoder" /><category term="ABC" /><summary type="html"><![CDATA[A. 10yen Stamp 10엔 스탬프를 모아서 현재 $X$에서 목표치 $Y$를 달성할 때까지 몇 번을 봉투에 넣어야 하는지 계산하는 문제이다. $X$가 $Y$보다 큰 경우 0을 출력해주는 예외처리만 해주면 된다. ```cpp #include #include #include #include #include #include #define endl '\n' #define fastio ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); using namespace std;]]></summary></entry></feed>