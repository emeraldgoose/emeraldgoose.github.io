I"18<h2 id="a-minimum-distance-to-the-target-element">A. Minimum Distance to the Target Element</h2>

<p><code class="language-plaintext highlighter-rouge">nums[i]==target</code>이면서 <code class="language-plaintext highlighter-rouge">abs(i-start)</code>의 값이 최소인 값을 리턴하는 문제이다. 그대로 구현해주면 된다.</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
  <span class="kt">int</span> <span class="n">getMinDistance</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">,</span> <span class="kt">int</span> <span class="n">start</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">ret</span><span class="o">=</span><span class="mf">1e9</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">target</span> <span class="o">&amp;&amp;</span> <span class="n">abs</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="n">start</span><span class="p">)</span><span class="o">&lt;</span><span class="n">ret</span><span class="p">)</span> <span class="n">ret</span><span class="o">=</span><span class="n">abs</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="n">start</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>
<hr />

<h2 id="b-splitting-a-string-into-descending-consecutive-values">B. Splitting a String Into Descending Consecutive Values</h2>

<p>주어진 <code class="language-plaintext highlighter-rouge">s</code>의 길이가 1 ≤ s ≤ 20이므로 완전탐색하여 조건을 만족하는지 확인할 수 있다.</p>

<p>그러나 길이가 20인 문자열에서 중간을 잘랐을 때 long long 범위를 넘어서면 안되므로 처음 <code class="language-plaintext highlighter-rouge">dfs</code>를 돌리기 전에 prefix가 0인 것들을 제외한 나머지 길이가 long long 범위를 넘어서는지 확인했다.</p>

<p><code class="language-plaintext highlighter-rouge">dfs</code>함수의 경우 두 문자열을 인자로 받게 하여 현재 문자열인 <code class="language-plaintext highlighter-rouge">cur</code>를 잘랐을 때 이전 문자열 <code class="language-plaintext highlighter-rouge">prev</code>와 1의 차이가 나는지 확인하면서 재귀호출을 하도록 작성했다.</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
  <span class="kt">bool</span> <span class="n">dfs</span><span class="p">(</span><span class="n">string</span> <span class="n">prev</span><span class="p">,</span> <span class="n">string</span> <span class="n">cur</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">cur</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">bool</span> <span class="n">ok</span><span class="o">=</span><span class="nb">false</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">cur</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">string</span> <span class="n">tmp</span><span class="o">=</span><span class="n">cur</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
      <span class="kt">long</span> <span class="kt">long</span> <span class="n">a</span><span class="o">=</span><span class="n">stoll</span><span class="p">(</span><span class="n">prev</span><span class="p">),</span> <span class="n">b</span><span class="o">=</span><span class="n">stoll</span><span class="p">(</span><span class="n">tmp</span><span class="p">);</span>
      <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="o">-</span><span class="n">b</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">dfs</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span><span class="n">cur</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">i</span><span class="p">)))</span> <span class="p">{</span>
          <span class="n">ok</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">ok</span><span class="p">;</span>
  <span class="p">}</span>
    
  <span class="kt">bool</span> <span class="n">splitString</span><span class="p">(</span><span class="n">string</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">string</span> <span class="n">a</span><span class="o">=</span><span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">i</span><span class="p">),</span> <span class="n">b</span><span class="o">=</span><span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
      <span class="c1">// stoll의 out of range를 막기위해 prefix가 0인 것들을 제외한 나머지 길이가 long long 범위를 넘지 못하게 제한</span>
      <span class="kt">int</span> <span class="n">zero_a</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">zero_b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">==</span><span class="sc">'0'</span><span class="p">)</span> <span class="n">zero_a</span><span class="o">++</span><span class="p">;</span>
        <span class="k">else</span> <span class="k">break</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">b</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">==</span><span class="sc">'0'</span><span class="p">)</span> <span class="n">zero_b</span><span class="o">++</span><span class="p">;</span>
        <span class="k">else</span> <span class="k">break</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="n">zero_a</span><span class="o">&gt;</span><span class="mi">18</span> <span class="o">||</span> <span class="n">b</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="n">zero_b</span><span class="o">&gt;</span><span class="mi">18</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
      <span class="k">if</span><span class="p">(</span><span class="n">dfs</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span> <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>
<hr />

<h2 id="c-minimum-adjacent-swaps-to-reach-the-kth-smallest-number">C. Minimum Adjacent Swaps to Reach the Kth Smallest Number</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
  <span class="kt">int</span> <span class="n">getMinSwaps</span><span class="p">(</span><span class="n">string</span> <span class="n">num</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">string</span> <span class="n">num2</span><span class="o">=</span><span class="n">num</span><span class="p">;</span>
  <span class="c1">// kth premutation</span>
  <span class="k">while</span><span class="p">(</span><span class="n">k</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">next_permutation</span><span class="p">(</span><span class="n">num2</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">num2</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
  <span class="p">}</span>
  <span class="c1">// counting swap</span>
  <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="c1">// </span>
  <span class="kt">int</span> <span class="n">answer</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
  <span class="k">while</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">num</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
    <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">!=</span><span class="n">num2</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="n">j</span><span class="o">++</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">swap</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">num</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]);</span> <span class="c1">// adjcent swap</span>
      <span class="n">j</span><span class="o">--</span><span class="p">;</span>
      <span class="n">answer</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// cout&lt;&lt;num&lt;&lt;endl;</span>
    <span class="n">i</span><span class="o">++</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>
<hr />

<h2 id="d-minimum-interval-to-include-each-query">D. Minimum Interval to Include Each Query</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>
:ET