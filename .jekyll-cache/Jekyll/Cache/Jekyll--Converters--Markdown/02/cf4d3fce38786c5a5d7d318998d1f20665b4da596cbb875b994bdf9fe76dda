I"(<h2 id="github-action-설정">Github Action 설정</h2>
<p>Github Action은 사용자가 원하는 트리거에 따라 워크플로우를 실행할 수 있는 CI(Continuous Integration) 도구입니다. 구글의 Gemini-1.5-flash 모델을 사용하여 Pull Request시 코드 변경사항에 대해 LLM이 코드리뷰할 수 있도록 워크플로우를 생성하는 과정을 설명할 것입니다.</p>

<h3 id="workflowyml">workflow.yml</h3>
<p>repository에 <code class="language-plaintext highlighter-rouge">.github/workflows</code>에 워크플로우가 정의된 yml파일이 있으면 github action을 사용할 수 있습니다.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">code-review</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">types</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">opened</span><span class="pi">,</span> <span class="nv">reopened</span><span class="pi">,</span> <span class="nv">synchronize</span><span class="pi">]</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">review</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">permissions</span><span class="pi">:</span>
      <span class="na">contents</span><span class="pi">:</span> <span class="s">read</span>
      <span class="na">pull-requests</span><span class="pi">:</span> <span class="s">write</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout Repo</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v3</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set up Node</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v3</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install GoogleGenerativeAI</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">npm install @google/generative-ai</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Get git diff</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">git fetch origin `"$"`</span>
          <span class="s">git fetch origin "$"</span>
          <span class="s">git diff --unified=0 "origin/$" &gt; "diff.txt"</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run Gemini-1.5-flash</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/github-script@v7</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">const fs = require("fs");</span>
            <span class="s">const diff_output = fs.readFileSync("diff.txt",'utf8');</span>
            
            <span class="s">const { GoogleGenerativeAI } = require("@google/generative-ai");</span>
            <span class="s">const genAI = new GoogleGenerativeAI("$");</span>
            <span class="s">const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash"});</span>
            
            <span class="s">const prompt = `You are a senior software engineer and need to perform a code review based on the results of a given git diff. Review the changed code from different perspectives and let us know if there are any changes that need to be made. If you see any code that needs to be fixed in the result of the git diff, you need to calculate the exact line number by referring to the “@@ -0,0 +0,0 @@” part. The output format is \[{“path”:“{ filepath }”, “line”: { line }, “text”: { review comment }, “side”: “RIGHT"}\] format must be respected.\n&lt;git diff&gt;${diff_output}&lt;/git diff&gt;`;</span>
            <span class="s">const result = await model.generateContent(prompt);</span>
            <span class="s">const response = await result.response;</span>
            <span class="s">const text = response.text();</span>
            
            <span class="s">fs.writeFileSync('res.txt',text);</span>
            <span class="s">console.log('Save Results!')</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">output</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">store</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">COMMENT=$(sed '/^```/d' res.txt | jq -c .)</span>
          <span class="s">echo "comment=$COMMENT" &gt;&gt; $GITHUB_OUTPUT</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Add Pull Request Review Comment</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">nbaztec/add-pr-review-comment@v1.0.7</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">comments</span><span class="pi">:</span> <span class="s">$</span>
          <span class="na">repo-token</span><span class="pi">:</span> <span class="s">$</span>
          <span class="na">repo-token-user-login</span><span class="pi">:</span> <span class="s1">'</span><span class="s">github-actions[bot]'</span> <span class="c1"># The user.login for temporary GitHub tokens</span>
          <span class="na">allow-repeats</span><span class="pi">:</span> <span class="no">false</span> <span class="c1"># This is the default</span>
</code></pre></div></div>

:ET